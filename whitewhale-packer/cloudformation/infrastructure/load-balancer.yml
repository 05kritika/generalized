---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Resources to create a Load Balancer that exposes the application running
  It stores the access logs in an S3 Bucket with a key composed of the Stack
  Name and the Environment parameters

Parameters:

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC to host the Load Balancer

  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet Ids to host the Load Balancer

  CertificateArn:
    Type: String
    Default: ""
    Description: SSL Certificate ARN

  Identifier:
    Type: String
    MinLength: 1
    MaxLength: 80
    AllowedPattern: "[a-z0-9-]+"
    ConstraintDescription: Malformed input parameter. Identifier must only contain lower case letters, numbers, and -.
    Description: Identifier used to name some resources

  Scheme:
    Type: String
    Default: internet-facing
    Description: Load Balancer scheme
    AllowedValues: [ internet-facing, internal ]

  OwnerName:
    Type: String
    Default: efabless
    Description: An arbitrary tag name for the owner of these resources

  StackName:
    Type: String
    Description: The name of the stack to which these resources belong

  Environment:
    Type: String
    Default: dev
    AllowedValues: [ prod, stage, dev, qa ]
    Description: Environment name to append to resources names and tags

Conditions:

  isTLSEnabled: !Not [ !Equals [ !Ref CertificateArn, "" ] ]

Mappings:

  Region2ELBAccountId:
    us-east-1:
      AccountId: '127311923021'
    us-west-1:
      AccountId: '027434742980'
    us-west-2:
      AccountId: '797873946194'
    eu-west-1:
      AccountId: '156460612806'
    ap-northeast-1:
      AccountId: '582318560864'
    ap-northeast-2:
      AccountId: '600734575887'
    ap-southeast-1:
      AccountId: '114774131450'
    ap-southeast-2:
      AccountId: '783225319266'
    ap-south-1:
      AccountId: '718504428378'
    us-east-2:
      AccountId: '033677994240'
    sa-east-1:
      AccountId: '507241528517'
    cn-north-1:
      AccountId: '638102146993'
    eu-central-1:
      AccountId: '054676820928'

Resources:

  # ########## Security Groups #########

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Only allow HTTP and HTTPS comunication to the load balancer
      SecurityGroupIngress:
      - { IpProtocol: tcp, CidrIp: "0.0.0.0/0", FromPort: 80, ToPort: 80 }
      - { IpProtocol: tcp, CidrIp: "0.0.0.0/0", FromPort: 443, ToPort: 443 }
      SecurityGroupEgress:
      - { IpProtocol: -1, CidrIp: "0.0.0.0/0" }
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-alb-sg
      - Key: Owner
        Value: !Ref OwnerName
      - Key: StackName
        Value: !Ref StackName
      - Key: Environment
        Value: !Ref Environment

  # ############# S3 Bucket ############

  AccessLogsS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub ${Identifier}-${Environment}-alb-logs-${AWS::AccountId}
      AccessControl: LogDeliveryWrite
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-bucket
      - Key: Owner
        Value: !Ref OwnerName
      - Key: StackName
        Value: !Ref StackName
      - Key: Environment
        Value: !Ref Environment
  
  ALBLogsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AccessLogsS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            AWS: !FindInMap [ Region2ELBAccountId, !Ref 'AWS::Region', AccountId ]
          Action: 
          - s3:PutObject
          Resource: !Sub arn:aws:s3:::${AccessLogsS3Bucket}/*

  # ########### Load Balancer ##########

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${Identifier}-${Environment}-alb
      Scheme: !Ref Scheme
      Type: application
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref SecurityGroup
      LoadBalancerAttributes:
      - Key: access_logs.s3.enabled
        Value: true
      - Key: access_logs.s3.bucket
        Value: !Ref AccessLogsS3Bucket
      - Key: access_logs.s3.prefix
        Value: !Sub ${Identifier}-${Environment}
      - Key: idle_timeout.timeout_seconds
        Value: 4000
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-alb
      - Key: Owner
        Value: !Ref OwnerName
      - Key: StackName
        Value: !Ref StackName
      - Key: Environment
        Value: !Ref Environment
    DependsOn: ALBLogsBucketPolicy

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref DefaultTargetGroup

  # Conditioned if SSL Certificate is passed
  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: isTLSEnabled
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
      - CertificateArn: !Ref CertificateArn
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref DefaultTargetGroup

  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      Name: !Sub ${Identifier}-${Environment}-default-tg
      Tags:
      - Key: Name
        Value: !Sub ${Identifier}-${Environment}-default-tg
      - Key: Owner
        Value: !Ref OwnerName
      - Key: StackName
        Value: !Ref StackName
      - Key: Environment
        Value: !Ref Environment

Outputs:

  CanonicalHostedZoneID:
    Description: Canonical Hosted Zone ID
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID

  HttpListenerArn:
    Description: HTTP Listener ARN
    Value: !Ref HttpListener

  HttpsListenerArn:
    Description: HTTPS Listener ARN
    Value: !Ref HttpsListener
    Condition: isTLSEnabled

  LoadBalancerArn:
    Description: Load Balancer ARN
    Value: !Ref LoadBalancer

  LoadBalancerDomain:
    Description: Load Balancer Domain
    Value: !GetAtt LoadBalancer.DNSName

  Identifier:
    Description: Load Balancer Name
    Value: !GetAtt LoadBalancer.LoadBalancerName

  SecurityGroupId:
    Description: Load Balancer Security Group ID
    Value: !Ref SecurityGroup

  AccessLogsBucketName:
    Description: S3 Bucket name for the ALB logs 
    Value: !Ref AccessLogsS3Bucket