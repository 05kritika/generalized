AWSTemplateFormatVersion: "2010-09-09"
Description: "ECS Services"

Parameters:
  Environment:
    Type: String
    Description: "Environment platform, this parameter will be used to name the resources ."
    Default: development
    AllowedValues:
      - production
      - staging
      - development
  DesiredCount:
    Type: Number
    Default: 0
    Description: "Desired count of containers."
  StackName:
    Type: String
    Description: "This name will be used to named the resources"
  QSS3BucketName:
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    Default: "tests"
    Type: String
    ConstraintDescription: "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    Description: "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
  QSS3KeyPrefix:
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    Default: "company-infrastructure"
    Type: String
    ConstraintDescription: "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Description: "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with a hyphen (-)."
  Cluster:
    Description: ECS Cluster name
    Type: String
  ContainerPort:
    Description: Specific port where the service is listening.
    Type: Number
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: "VPC ID"
  LoadBalancerHttpListenerArn:
    Description: Load Balancer HTTP Listerner ARN
    Type: String
    Default: AWS::NoValue
  LoadBalancerHttpsListenerArn:
    Description: Load Balancer HTTPS Listerner ARN
    Type: String
    Default: AWS::NoValue
  ServiceName:
    Description: Service Name
    Type: String
  Subdomain:
    Description: Service Name
    Type: String
    Default: AWS::NoValue
  Priority:
    Type: Number
    Description: "Listener Rule Priority"
    Default: 0
    MinValue: 0
    MaxValue: 999
  MinimumHealthyPercent:
    Type: Number
    Description: "Minimum Healthy Percent for ECS services"
    Default: 0
    MinValue: 0
    MaxValue: 100
  ConfigBucket:
    Type: String
    Description: Configuration bucket (if needed)
    Default: development.config.earnup.com
  PrivateDNS:
    Type: String
    Description: Private DNS allocation.
  CanonicalHostedZoneID:
    Type: String
    Description: LoadBalancer Canonical Hosted Zone ID.
  LoadBalancerDomain:
    Type: String
    Description: LoadBalancer Domain.
  PrivateDomain:
    Type: String
    Description: Private Domain.
  ContainerMemory:
    Type: String
    Description: Ram memory allocation for a task running in the cluster.
    Default: 512
  ContainerCPU:
    Type: String
    Description: CPU units allocated for a task running in the cluster.
    Default: 512

Mappings:
  Environment:
    development:
      Name: dev
    staging:
      Name: staging
    production:
      Name: prod

Resources:
  ListenerStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${QSS3BucketName}/${QSS3KeyPrefix}/applications/listener.yml"
      Parameters:
        ContainerPort: !Ref ContainerPort
        CreateHttpListener: 'true'
        HostPattern: !Sub "${Subdomain}.*"
        Priority: !Ref Priority
        HttpListenerArn: !Ref LoadBalancerHttpListenerArn
        HttpsListenerArn: !Ref LoadBalancerHttpsListenerArn
        ServiceName: !Ref ServiceName
        Environment: !Ref Environment
        StackName: !Ref StackName
        TargetGroupName: !Sub ${ServiceName}-${Environment}
        VpcId: !Ref VpcId
      Tags:
        - Key: ServiceName
          Value: !Ref ServiceName
        - Key: StackName
          Value: !Ref StackName

  # ServiceDiscovery:
  #   Type: AWS::Route53::RecordSet
  #   Properties:
  #     HostedZoneId: !Ref PrivateDNS
  #     Comment: Wilcard DNS for internal resolution
  #     Name: !Sub "${Subdomain}.${PrivateDomain}."
  #     Type: A
  #     AliasTarget:
  #       HostedZoneId: !Ref CanonicalHostedZoneID
  #       DNSName: !Ref LoadBalancerDomain

  TaskDefinition:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${QSS3BucketName}/${QSS3KeyPrefix}/services/task-definition.yml"
      Parameters:
        ServiceName: !Ref ServiceName
        StackName: !Ref StackName
        Environment: !Ref Environment
        ContainerPort: !Ref ContainerPort
        ContainerMemory: !Ref ContainerMemory
        ContainerCPU: !Ref ContainerCPU

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      ServiceName: !Ref ServiceName
      Role: !Ref ServiceRole
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: !Ref MinimumHealthyPercent
      DesiredCount: !Ref DesiredCount
      HealthCheckGracePeriodSeconds: 60
      LoadBalancers:
        - ContainerName: !Sub ${ServiceName}-${Environment}
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !GetAtt ListenerStack.Outputs.TargetGroupArn
      TaskDefinition: !GetAtt TaskDefinition.Outputs.TaskDefinition
      PlacementStrategies:
        - Type: binpack
          Field: cpu
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ServiceRole-${ServiceName}-${Environment}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole

  ScalableTargetRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ScaleTargetRole-${ServiceName}-${Environment}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'application-autoscaling:*'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'ecs:DescribeServices'
                  - 'ecs:UpdateService'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:SetAlarmState'
                  - 'cloudwatch:DeleteAlarms'
                Resource: '*'
  ServiceScalableTarget:
    DependsOn: Service
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: !Ref DesiredCount
      MinCapacity: !Ref DesiredCount
      ResourceId: !Join ['', [service/, !Ref Cluster, /, !Ref ServiceName]]
      RoleARN: !GetAtt [ScalableTargetRole, Arn]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  ServiceUpStepPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: CPUUtilization-step-up
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 30
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1
  ServiceUpStepPolicyMEM:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: MemoryUtilization-step-up
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 30
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1
  ServiceDownStepPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: CPUUtilization-step-down
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 30
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: "-1"
  ServiceDownStepPolicyMEM:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: MemoryUtilization-step-down
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 30
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: "-1"

  ServiceCPUAlarmUp:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Sub "${ServiceName}-${Environment}-CPUUtilization-Up"
      ActionsEnabled: true
      AlarmActions:
        - !Ref ServiceUpStepPolicyCPU
      AlarmDescription: >
        The CPU utilization of the Service has exeeded 90% for more than 1 minute.
        Breaching this alarm should trigger an AutoScalingGroup to scale up.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !Ref ServiceName
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Period: 60
      Statistic: Average
      Threshold: 65
  ServiceCPUAlarmDown:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Sub "${ServiceName}-${Environment}-CPUUtilization-Down"
      ActionsEnabled: true
      AlarmActions:
        - !Ref ServiceDownStepPolicyCPU
      AlarmDescription: >
        The CPU utilization of the Service cluster has dropped below 20% for more than 1 minute.
        Breaching this alarm should trigger an AutoScalingGroup to scale up.
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !Ref ServiceName
      EvaluationPeriods: 60
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Period: 60
      Statistic: Average
      Threshold: 20
  ServiceMemAlarmUp:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Sub "${ServiceName}-${Environment}-MemoryUtilization-Up"
      ActionsEnabled: true
      AlarmActions:
        - !Ref ServiceUpStepPolicyMEM
      AlarmDescription: >
        The MemoryUtilization of the Service has exceeded 90% for more than 3 minutes.
        Breaching this alarm should trigger an ASG scale out.
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !Ref ServiceName
      EvaluationPeriods: 1
      MetricName: MemoryUtilization
      Namespace: AWS/ECS
      Period: 60
      Statistic: Average
      Threshold: 65
  ServiceMemAlarmDown:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Sub "${ServiceName}-${Environment}-MemoryUtilization-Down"
      ActionsEnabled: true
      AlarmActions:
        - !Ref ServiceDownStepPolicyMEM
      AlarmDescription: >
        The MemoryUtilization of the Service has dropped below 40% for more than 1 hour.
        Breaching this alarm should trigger an ASG scale in.
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref Cluster
        - Name: ServiceName
          Value: !Ref ServiceName
      EvaluationPeriods: 60
      MetricName: MemoryUtilization
      Namespace: AWS/ECS
      Period: 60
      Statistic: Average
      Threshold: 12
