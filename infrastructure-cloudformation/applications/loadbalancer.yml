AWSTemplateFormatVersion: "2010-09-09"
Description: "Application Load Balancer"

Parameters:
  HostedZoneId:
    Type: String
    Default: ""
    Description: "[IF EMPTY => will attempt to create domain on Route53]; Public domain hosted zone ID (Route 53)"
  LoadBalancerName:
    Type: String
    Description: "Load Balancer Name"
  Domain:
    Type: String
    Description: "Domain name for DNS (Optional)"
  Environment:
    Type: String
    Description: For naming (development, staging, production)
  Scheme:
    Type: String
    Description: "Load Balancer Scheme"
    Default: ""
    AllowedValues:
      - ""
      - internal
      - internet-facing
  Certificate:
    Type: String
    Description: "SSL Certificate ARN"
    Default: ""
  SubnetIds:
    Type: CommaDelimitedList
    Description: "Subnet IDs"
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: "VPC ID"

Outputs:
  CanonicalHostedZoneID:
    Description: "Canonical Hosted Zone ID"
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID
  HttpListenerArn:
    Description: "HTTP Listener ARN"
    Value: !Ref HttpListener
  HttpsListenerArn:
    Description: "HTTPS Listener ARN"
    Value: !Ref HttpsListener
    Condition: SslCertificateArnPresent
  LoadBalancerArn:
    Description: "Load Balancer ARN"
    Value: !Ref LoadBalancer
  LoadBalancerDomain:
    Description: "Load Balancer Domain"
    Value: !GetAtt LoadBalancer.DNSName
  LoadBalancerName:
    Description: "Load Balancer Name"
    Value: !GetAtt LoadBalancer.LoadBalancerName
  SecurityGroupId:
    Description: "Load Balancer Security Group ID"
    Value: !Ref SecurityGroup
  TargetGroupArn:
    Description: "Target Group ARN"
    Value: !Ref TargetGroup
  PrivateDNS:
    Description: Private DNS hosted zone
    Value: !If
    - HostedEmpty
    - !Ref PrivateDNS
    - !Ref HostedZoneId
  PrivateDomain:
    Description: Private Domain.
    Value: !Ref Domain

Conditions:
  SchemeEmpty: !Equals [!Ref Scheme, ""]
  HostedEmpty: !Equals [!Ref HostedZoneId, ""]
  SslCertificateArnPresent: !Not [!Equals [!Ref Certificate, ""]]

Resources:
  PrivateDNS:
    Condition: HostedEmpty
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment: "Internal Hosted Zone"
      Name: !Ref Domain
      VPCs:
        - VPCId: !Ref VpcId
          VPCRegion: !Ref "AWS::Region"

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: '443'
            Protocol: "HTTPS"
            Query: "#{query}"
            StatusCode: HTTP_301

  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: SslCertificateArnPresent
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref LoadBalancerName
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: 'true'
        - Key: access_logs.s3.bucket
          Value: company-load-balancer-access-logs
        - Key: access_logs.s3.prefix
          Value: !Sub ${Environment}
      Scheme: !If
        - SchemeEmpty
        - !Ref AWS::NoValue
        - !Ref Scheme
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref SecurityGroup

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub "${LoadBalancerName} security group"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /health_check
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      Matcher:
        HttpCode: '200'
      Port: 80
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '300'
      UnhealthyThresholdCount: 3
      VpcId: !Ref VpcId
      Tags:
        - Key: LoadBalancerName
          Value: !Ref LoadBalancerName
        - Key: VpcId
          Value: !Ref VpcId
