AWSTemplateFormatVersion: '2010-09-09'
Description: Sets up an OpenVPN Access Server.
Parameters:
  AvailabilityZone:
    Type: String
    Description: AvailabilityZone.
  Subnet:
      Type: AWS::EC2::Subnet::Id
      Description: Subnet to launch the instance into.
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: Select vpc
  RecognizeEnv:
    Type: String
    Default: Management
    AllowedValues:
      - Management
      - Development
    Description: Enter the Name for the Recognize environment.
  InstanceKeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Enter the name of an existing key pair to use in this template.
  VpnInstanceType:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - m3.medium
      - m4.large
    Description: Enter a size for the OpenVPN instance from t2.nano, t2.micro, t2.small,
      m3.medium, or m4.large. Default is t2.micro.
  VpnPublicHostedZone:
    Type: AWS::Route53::HostedZone::Id
    Description: The public hosted zone for the VPN instance.
  VpnPublicHostname:
    Type: String
    MaxLength: '255'
    MinLength: '1'
    ConstraintDescription: must be a valid hostname.
    Default: vpn.recognizeapp.com
    Description: The public hostname for the VPN instance.
  VpnUsername:
    Type: String
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    MaxLength: '255'
    MinLength: '1'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Default: openvpn
    Description: The initial admin Username for the VPN.
  VpnPassword:
    Type: String
    NoEcho: 'true'
    MaxLength: '255'
    MinLength: '4'
    ConstraintDescription: must contain atleast 4 characters.
    Default: openvpn
    Description: The initial admin Password for the VPN.
  ImageId:
    Type: String
    Default: ami-0a5aef046a3a6e7bf
Resources:
  VpnSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${RecognizeEnv}.SG.VPN'
      GroupDescription: The VPN Security Group
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: '943'
          ToPort: '943'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: udp
          FromPort: '1194'
          ToPort: '1194'
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Recognize:Env
          Value: !Ref 'RecognizeEnv'
        - Key: Name
          Value: !Sub '${RecognizeEnv}.SG.VPN'
  VpnInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref 'VpnRole'

  VpnServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref 'AvailabilityZone'
      ImageId: !Ref ImageId
      InstanceInitiatedShutdownBehavior: stop
      InstanceType: !Ref 'VpnInstanceType'
      KeyName: !Ref 'InstanceKeyName'
      SecurityGroupIds:
        - !Ref 'VpnSecurityGroup'
      SourceDestCheck: 'false'
      SubnetId: !Ref 'Subnet'
      IamInstanceProfile: !Ref 'VpnInstanceProfile'
      Tags:
        - Key: Recognize:Env
          Value: !Ref 'RecognizeEnv'
        - Key: Name
          Value: !Sub '${RecognizeEnv}.VPN'
      Tenancy: default
      UserData:
       Fn::Base64: !Sub |
        Content-Type: multipart/mixed; boundary="==BOUNDARY=="
        MIME-Version: 1.0

        --==BOUNDARY==
        Content-Type: text/x-shellscript; charset="us-ascii"
        #!/bin/bash
        yum -y update

        # Install CloudFormation bootstrap and the jq JSON parser
        yum install -y aws-cfn-bootstrap jq wget

        # Configure OpenVPN
        public_hostname=${VpnPublicHostname}
        admin_user=${VpnUsername}
        admin_pw=${VpnPassword}
        reroute_gw=0
        reroute_dns=0

        # Send CloudFormation success signal
        /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstances --configsets InstallAndRun --region ${AWS::Region}
        /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}

        --==BOUNDARY==--
  VpnIpAddress:
    Type: AWS::EC2::EIP
    Properties:
      InstanceId: !Ref 'VpnServerInstance'
      Domain: vpc
  VpnPublicDnsRecord:
     Type: AWS::Route53::RecordSet
     Properties:
       HostedZoneId: !Ref 'VpnPublicHostedZone'
       Comment: The public DNS name for the VPN instance.
       Name: !Join
         - ''
         - - !Ref 'VpnPublicHostname'
           - .
       Type: A
       TTL: '900'
       ResourceRecords:
         - !Ref 'VpnIpAddress'

  VpnRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentAdminPolicy
Outputs:
  VPNPublicDNS:
    Description: The public VPN hostname used in the environment.
    Value: !Ref 'VpnPublicHostname'
