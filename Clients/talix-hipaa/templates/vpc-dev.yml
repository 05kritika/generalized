---
AWSTemplateFormatVersion: 2010-09-09
Description: Provides networking configuration for a standard dev VPC (qs-1nb14cqcg)
Parameters:
  pCreateBastionHost:
    Description: Should a Bastion host be created inside the DMZ Subnet(s)?
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  pDevDMZSubnetPublicIP:
    Description: Should Public IPs be auto-assigned to instances launched in the DMZ subnet(s)?
    Type: String
    Default: false
    AllowedValues:
    - true
    - false
  pProductionVPC:
    Description: Production VPC to peer with (optional)
    Type: String
    Default: ''
  pProductionCIDR:
    Description: CIDR of Production VPC
    Type: String
    Default: ''
  pRouteTableProdPrivate:
    Description: Route Table ID for Prod VPC Private
    Type: String
    Default: ''
  pRouteTableProdPublic:
    Description: Route Table ID for Prod VPC Public
    Type: String
    Default: ''
  pRegionAZ1Name:
    Description: Availability Zone 1 Name in Region
    Type: String
    Default: us-east-1b
  pRegionAZ2Name:
    Description: Availability Zone 2 Name in Region
    Type: String
    Default: us-west-1c
  pDevVPCName:
    Description: Dev VPC Name
    Type: String
    Default: Dev VPC
  pDevCIDR:
    Description: CIDR block for Dev VPC
    Type: String
  pDevDMZSubnetACIDR:
    Description: CIDR block for Dev AZ-1a subnet
    Type: String
  pDevDMZSubnetBCIDR:
    Description: CIDR block for Dev AZ-1b subnet
    Type: String
  pDevPrivateSubnetACIDR:
    Description: CIDR block for Dev AZ-1a subnet
    Type: String
  pDevPrivateSubnetBCIDR:
    Description: CIDR block for Dev AZ-1b subnet
    Type: String
  pVPCTenancy:
    Description: Instance tenancy behavior for this VPC
    Type: String
    Default: default
    AllowedValues:
    - default
    - dedicated
  pBastionSSHCIDR:
    Type: String
    Default: 0.0.0.0/0
    Description: The CIDR Allowed SSH access to the bastion host
  pEnvironment:
    Description: Environment (development, test, or production)
    Type: String
    Default: development
  pSupportsNatGateway:
    Description: Specifies whether this region supports NAT Gateway (this value is
      determined by the main stack if it is invoked from there)
    Type: String
    Default: true
  pFlowLogGroup:
    Description: Log Group for capturing VPC Flow Logs
    Type: String
    Default: ''
Conditions:
  cGovCloudCondition:
    !Equals
    - !Ref AWS::Region
    - us-gov-west-1
  cCreateBastionHost:
    !Equals
    - true
    - !Ref pCreateBastionHost
  cCreatePeeringProduction:
    !Not
    - !Equals
      - ''
      - !Ref pProductionVPC
  cNeedNatInstance:
    !Equals
    - false
    - !Ref pSupportsNatGateway
  cSupportsNatGateway:
    !Equals
    - true
    - !Ref pSupportsNatGateway
  cEnableFlowLogs:
    !Not
    - !Equals
      - !Ref pFlowLogGroup
      - ''
  cDevSubnetDefaultRoute:
    !Equals
    - true
    - !Ref pDevDMZSubnetPublicIP
Resources:

  # ################ VPC ###############

  rVPCDev:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref pDevCIDR
      InstanceTenancy: !Ref pVPCTenancy
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Ref pDevVPCName
  
  FlowLogRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: vpc-flowlog-role-dev
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement: 
        - Effect: Allow
          Principal: 
            Service: 
            - vpc-flow-logs.amazonaws.com
          Action: 
          - sts:AssumeRole
      Policies:
          - PolicyName: !Sub ssm-${AWS::StackName}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - logs:DescribeLogStreams
                    - logs:DescribeLogGroups
                    - logs:PutLogEvents
                    - logs:CreateLogStream
                    - logs:CreateLogGroup
                  Resource:
                    - "*"

  rVPCFlowLog:
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowLogRole.Arn
      LogGroupName: vpc-flowlog-dev
      ResourceId: !Ref rVPCDev
      ResourceType: VPC
      TrafficType: ALL

  rDevDMZSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref pDevDMZSubnetACIDR
      AvailabilityZone: !Ref pRegionAZ1Name
      MapPublicIpOnLaunch: !Ref pDevDMZSubnetPublicIP
      VpcId: !Ref rVPCDev
      Tags:
      - Key: Name
        Value: Development DMZ Subnet A
  rDevDMZSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref pDevDMZSubnetBCIDR
      AvailabilityZone: !Ref pRegionAZ2Name
      MapPublicIpOnLaunch: !Ref pDevDMZSubnetPublicIP
      VpcId: !Ref rVPCDev
      Tags:
      - Key: Name
        Value: Development DMZ Subnet B
  rDevPrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref pDevPrivateSubnetACIDR
      AvailabilityZone: !Ref pRegionAZ1Name
      VpcId: !Ref rVPCDev
      Tags:
      - Key: Name
        Value: Development Private Subnet A
  rDevPrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref pDevPrivateSubnetBCIDR
      AvailabilityZone: !Ref pRegionAZ2Name
      VpcId: !Ref rVPCDev
      Tags:
      - Key: Name
        Value: Development Private Subnet B

  rIGWDev:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value: igw-development

  rRouteTableDevPrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPCDev
      Tags:
      - Key: Name
        Value: Dev Private Route
  rRouteTableDevDMZ:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref rVPCDev
      Tags:
      - Key: Name
        Value: Dev DMZ Route
  rRouteDevIGW:
    DependsOn:
    - rGWAttachmentDevIGW
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rRouteTableDevDMZ
      GatewayId: !Ref rIGWDev
      DestinationCidrBlock: 0.0.0.0/0
  rRouteAssocDevDMZA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRouteTableDevDMZ
      SubnetId: !Ref rDevDMZSubnetA
  rRouteAssocDevDMZB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRouteTableDevDMZ
      SubnetId: !Ref rDevDMZSubnetB
  rRouteAssocDevPrivA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRouteTableDevPrivate
      SubnetId: !Ref rDevPrivateSubnetA
  rRouteAssocDevPrivB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref rRouteTableDevPrivate
      SubnetId: !Ref rDevPrivateSubnetB
  rENIProductionBastion:
    Condition: cCreateBastionHost
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref rDevDMZSubnetA
      GroupSet:
      - !Ref rSecurityGroupBastion
      Description: Interface for Bastion device
      Tags:
      - Key: Network
        Value: DevBastionDevice
  rEIPProdBastion:
    Type: AWS::EC2::EIP
    Condition: cCreateBastionHost
    Properties:
      Domain: vpc
  AssociaterEIPProdBastion:
    Type: AWS::EC2::EIPAssociation
    Condition: cCreateBastionHost
    Properties:
      AllocationId: !GetAtt rEIPProdBastion.AllocationId
      NetworkInterfaceId: !Ref rENIProductionBastion

  rSecurityGroupSSHFromDev:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable SSH access via port 22
      VpcId: !Ref rVPCDev
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref pDevCIDR
      Tags:
      - Key: Name
        Value: sg-ssh-access-from-development
      - Key: Environment
        Value: !Ref pEnvironment
  rGWAttachmentDevIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref rVPCDev
      InternetGatewayId: !Ref rIGWDev
  rSecurityGroupBastion:
    Type: AWS::EC2::SecurityGroup
    Condition: cCreateBastionHost
    Properties:
      GroupDescription: SG for Bastion Instances
      VpcId: !Ref rVPCDev
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref pBastionSSHCIDR
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 1
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: sg-ssh-access-from-bastion
      - Key: Environment
        Value: !Ref pEnvironment
  rPeeringConnectionProduction:
    Type: AWS::EC2::VPCPeeringConnection
    Condition: cCreatePeeringProduction
    Properties:
      PeerVpcId: !Ref pProductionVPC
      VpcId: !Ref rVPCDev
      Tags:
      - Key: Name
        Value: vpc-peer-production-development
      - Key: Environment
        Value: !Ref pEnvironment
  rRouteDevProdPrivate:
    Condition: cCreatePeeringProduction
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rRouteTableDevPrivate
      VpcPeeringConnectionId: !Ref rPeeringConnectionProduction
      DestinationCidrBlock: !Ref pProductionCIDR
  rRouteProdDev:
    Condition: cCreatePeeringProduction
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref pRouteTableProdPrivate
      VpcPeeringConnectionId: !Ref rPeeringConnectionProduction
      DestinationCidrBlock: !Ref pDevCIDR
  rRouteProdDevPublic:
    Condition: cCreatePeeringProduction
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref pRouteTableProdPublic
      VpcPeeringConnectionId: !Ref rPeeringConnectionProduction
      DestinationCidrBlock: !Ref pDevCIDR
  rRouteDevProdDMZ:
    Condition: cCreatePeeringProduction
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref rRouteTableDevDMZ
      VpcPeeringConnectionId: !Ref rPeeringConnectionProduction
      DestinationCidrBlock: !Ref pProductionCIDR
  rDevVpcFlowLogsServiceRole:
    Condition: cEnableFlowLogs
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Sid: AllowFlowLogs
          Effect: Allow
          Principal:
            Service: vpc-flow-logs.amazonaws.com
          Action: sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cloudwatchlogsrole
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            Effect: Allow
            Resource: '*'
  rDevVpcFlowLog:
    Condition: cEnableFlowLogs
    Type: AWS::EC2::FlowLog
    Properties:
      DeliverLogsPermissionArn: !GetAtt rDevVpcFlowLogsServiceRole.Arn
      LogGroupName: !Ref pFlowLogGroup
      ResourceId: !Ref rVPCDev
      ResourceType: VPC
      TrafficType: ALL
  rDevVpcFlowLogStream:
    Condition: cEnableFlowLogs
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !Ref pFlowLogGroup
Outputs:
  rVPCDev:
    Value: !Ref rVPCDev
  rBastionInstanceIP:
    Condition: cCreateBastionHost
    Value:
      !If
      - cCreateBastionHost
      - !Ref rEIPProdBastion
      - ''
  rDevDMZSubnetA:
    Value: !Ref rDevDMZSubnetA
  rDevDMZSubnetB:
    Value: !Ref rDevDMZSubnetB
  rDevPrivateSubnetA:
    Value: !Ref rDevPrivateSubnetA
  rDevPrivateSubnetB:
    Value: !Ref rDevPrivateSubnetB
  rRouteTableMDevPrivate:
    Value: !Ref rRouteTableDevPrivate
  rRouteTableDevDMZ:
    Value: !Ref rRouteTableDevDMZ
  rSecurityGroupSSHFromDev:
    Value: !Ref rSecurityGroupSSHFromDev
...
