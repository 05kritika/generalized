AWSTemplateFormatVersion: "2010-09-09"
Description: "Cloudformation stack to create an ECS Cluster"

Parameters:
  ALBDNS:
    Type: String
    Description: Application Load Balancer DNS
  ClusterName:
    Type: String
  DataDogAPIKey:
    Type: AWS::SSM::Parameter::Value<String>
    Description: API Key of the DataDog Account on Parameter Store
    Default: /ECS/ddApi
  DesiredCapacity:
    Type: String
    Default: 2
  InstanceType:
    Description: Intance type using in the cluster
    Type: String
    Default: t2.medium
  KeyPair:
    Description: Amazon EC2 Key Pair
    Type: AWS::EC2::KeyPair::KeyName
  MaxBatchSize:
    Description: Max replacement size on updates
    Type: String
    Default: "2"
  MaxSize:
    Description: Max cluster size.
    Type: String
    Default: "2"
  MinInstancesInService:
    Description: Min cluster size on updates
    Type: String
    Default: 0
  MinSize:
    Description: Min cluster size.
    Type: String
    Default: "1"
  PauseTime:
    Description: Pause time on updates.
    Type: String
    Default: PT1M
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet-IDs the existing subnets in your VPC where you want to deploy node(s).
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC-ID of your existing Virtual Private Cloud (VPC).
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<String>
    Default: /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id
  Environment:
    Type: String
    Description: "Environment platform, this parameter will be used to name the resources ."
    Default: development
    AllowedValues:
      - production
      - cproduction
      - staging
      - development
  StackName:
    Type: String
    Description: "This name will be used to named the resources"

Resources:
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  EcsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EcsRole

  EcsRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${ClusterName}-EcsRole-${AWS::Region}
      ManagedPolicyArns: [
        "arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM"
      ]
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Action": "sts:AssumeRole",
            "Effect": "Allow",
            "Principal": {
              "Service": "ec2.amazonaws.com"
            }
          }]
        }
      Policies:
        - PolicyName: ecs-service
          PolicyDocument: |
            {
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:UpdateContainerInstancesState",
                    "ecs:Submit*",
                    "ecr:*",
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:BatchGetImage",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:GetAuthorizationToken",
                    "cloudformation:*"
                  ],
                  "Resource": "*"
              }]
            }

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow tcp to client host
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 0
        ToPort: 65535
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: '-1'
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-${AWS::Region}
        - Key: StackName
          Value: !Sub ${StackName}-${Environment}

  EcsAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !Ref MinInstancesInService
        MaxBatchSize: !Ref MaxBatchSize
        PauseTime: !Ref PauseTime
        WaitOnResourceSignals: false
    Properties:
      VPCZoneIdentifier: !Ref SubnetIds
      LaunchConfigurationName: !Ref EcsLaunchConfiguration
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      TerminationPolicies:
        - Default
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-ECS
          PropagateAtLaunch: true
        - Key: StackName
          Value: !Sub ${StackName}-${Environment}
          PropagateAtLaunch: true
        - Key: Patch Group
          Value: AMZ-Linux
          PropagateAtLaunch: true

  EcsLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !Ref ECSAMI
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      SpotPrice: !Ref AWS::NoValue
      AssociatePublicIpAddress: false
      SecurityGroups:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref EcsInstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/xvdcy"
          Ebs:
            VolumeSize: 30
            VolumeType: "gp2"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo ECS_CONTAINER_STOP_TIMEOUT=90s >> /etc/ecs/ecs.config
          echo ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=2h >> /etc/ecs/ecs.config
          echo ECS_LOGLEVEL=info >> /etc/ecs/ecs.config

          yum update -y
          yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          yum install -y python-pip
          pip install awscli
          yum install -y aws-cfn-bootstrap
          yum install -y git
          yum install -y nfs-utils
          vgextend docker /dev/xvdcy
          lvextend -L+100G /dev/docker/docker-pool

          curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose

          # DataDog configuration
          DD_API_KEY=${DataDogAPIKey}  bash -c "$(curl -L https://raw.githubusercontent.com/DataDog/datadog-agent/master/cmd/agent/install_script.sh)"
          
          cat <<EOF > /etc/datadog-agent/conf.d/docker.d/conf.yaml
          init_config:
          instances:
              - collect_disk_stats: true
          EOF
          cat <<EOF > /etc/datadog-agent/conf.d/http_check.d/conf.yaml
          init_config:
          instances:
              - name:  demo
                url: ${ALBDNS}
                disable_ssl_validation: false
          EOF
          # DATADOG APM SETTINGS
          cat <<EOT >> /etc/datadog-agent/datadog.yaml
          apm_config:
              enabled: true
              apm_non_local_traffic: true
              analyzed_spans:
                  my-app|flask.request: 1
          EOT
          
          usermod -a -G docker dd-agent
          initctl restart datadog-agent

          sudo /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EcsLaunchConfiguration
          sudo /opt/aws/bin/cfn-signal -e 0 --region ${AWS::Region} --stack ${AWS::StackName} --resource EcsAutoScalingGroup
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EcsLaunchConfiguration
                [cfn-auto-reloader-hook1]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-signal -e 0 --region ${AWS::Region} --stack ${AWS::StackName} --resource EcsAutoScalingGroup
          commands:
            01_add_instance_to_cluster:
              command: !Sub echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

  ScaleDownAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleDownPolicy
      ComparisonOperator: LessThanOrEqualToThreshold
      EvaluationPeriods: 3
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Period: 60
      Statistic: Average
      Threshold: 50
      Unit: Percent
      Dimensions:
        - Name: ClusterName
          Value: !Ref ClusterName

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref EcsAutoScalingGroup
      EstimatedInstanceWarmup: 300
      MetricAggregationType: Average
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalUpperBound: 0.0
          ScalingAdjustment: -1

  ScaleUpMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleUpPolicyOnDemand
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Period: 60
      Statistic: Average
      Threshold: 80
      Unit: Percent
      Dimensions:
        - Name: ClusterName
          Value: !Ref ClusterName

  ScaleUpPolicyOnDemand:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref EcsAutoScalingGroup
      EstimatedInstanceWarmup: 300
      MetricAggregationType: Average
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          MetricIntervalUpperBound: 15
          ScalingAdjustment: 1
        - MetricIntervalLowerBound: 15
          ScalingAdjustment: 2


Outputs:
  EcsCluster:
    Value: !Ref EcsCluster