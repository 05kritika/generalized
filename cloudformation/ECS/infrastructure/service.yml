AWSTemplateFormatVersion: "2010-09-09"
Description: "ECS Services"

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC Param for the Target Group
  Cluster:
    Type: String
    Description: The ECS Cluster Id for the service
  DesiredCount:
    Type: Number
    Default: 1
    Description: Desided number of tasks that should be running on the cluster
  HttpListenerArn:
    Type: String
    Description: ALB http listener to register the task
  # Used for blue green deployment
  AlternateHttpListenerArn:
    Type: String
    Default: ""
    Description: ALB http listener to register the task
  HttpsListenerArn:
    Type: String
    Default: ""
    Description: ALB https listener to register the task
  RepositoryName:
    Type: String
    Description: ECR repository name where the docker image is located
  ImageTag:
    Type: String
    Description: Application image tag
  ContainerPort:
    Type: Number
    Description: Container Port to map
  DBEndpoint:
    Type: String
    Description: Database endpoint to pass as environment variable to the application
  Environment:
    Type: String
    Default: Dev
    AllowedValues: [Prod, Stage, Dev]
  StackName:
    Type: String
    Description: Stack name to prefix some resource names
Conditions:
  HttpsEnabled: !Not [!Equals [!Ref HttpsListenerArn, ""]]
  BlueGreen: !Not [!Equals [!Ref AlternateHttpListenerArn, ""]]
Resources:
  ############## Roles ##############
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - ecs.amazonaws.com
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
  ECSServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - application-autoscaling.amazonaws.com
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - ecs-tasks.amazonaws.com
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Policies: 
        - PolicyName: !Sub ${StackName}-${Environment}-GetSSMParameters
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: Allow
                Action:
                  - ssm:GetParameterHistory
                  - ssm:GetParametersByPath
                  - ssm:GetParameters
                  - ssm:GetParameter
                Resource: "*"
  ############# Service #############
  Service: 
    Type: AWS::ECS::Service
    Properties:
      LaunchType: EC2
      HealthCheckGracePeriodSeconds: 180
      Role: !Ref ECSServiceRole
      Cluster: !Ref Cluster
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      LoadBalancers: 
        - ContainerName: !Sub ${RepositoryName}-${Environment}
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroup
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub ${RepositoryName}-${Environment}
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Sub ${RepositoryName}-${Environment}
          Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}:${ImageTag}
          Environment:
            - Name: AWS_ENV_PATH
              Value: /L2-Demo/
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: DB_HOST
              Value: !Ref DBEndpoint
          MemoryReservation: 256
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
  ##### Service load balancing ######
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: !Ref ContainerPort
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /check
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
  HttpListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HttpListenerArn
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values: 
            - /*
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
  # Conditioned if Blue / Green deployment enabled
  AlternateHttpListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: BlueGreen
    Properties:
      ListenerArn: !Ref AlternateHttpListenerArn
      Priority: 4
      Conditions:
        - Field: path-pattern
          Values: 
            - /*
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
  # Conditioned if Https is enabled
  HttpsListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HttpsEnabled
    Properties:
      ListenerArn: !Ref HttpsListenerArn
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values: 
            - /*
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
  ########## CloudWatch Logs #########
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 30