AWSTemplateFormatVersion: '2010-09-09'
Description: 'Task definition (Containers)'

Parameters:
  ServiceName:
    Type: String
    Description: Name of the service
  StackName:
    Type: String
    Description: For naming (stack name)
  Environment:
    Type: String
    Description: For naming (development, staging, production)
  ContainerPort:
    Type: String
    Description: Port where the container is listening to.
  RedisHost:
    Description: Redis Cluster Address.
    Type: String
  DataDogAPIKey:
    Type: String
    Description: API Key of the DataDog Account

Resources:

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ServiceName}-${Environment}-${StackName}-${AWS::Region}
      Path: /
      AssumeRolePolicyDocument: |
          {
              "Version": "2012-10-17",
              "Statement": [
                  {
                      "Effect": "Allow",
                      "Principal": {
                          "Service": "ecs-tasks.amazonaws.com"
                      },
                      "Action": "sts:AssumeRole"
                  }
              ]
          }
      Policies:
        - PolicyName: !Sub ecs-service-file-${StackName}
          PolicyDocument: !Sub |
              {
                  "Version": "2012-10-17",
                  "Statement": [
                      {
                          "Sid": "VisualEditor0",
                          "Effect": "Allow",
                          "Action": [
                              "s3:*",
                              "logs:CreateLogStream",
                              "logs:CreateLogGroup",
                              "logs:DescribeLogStreams",
                              "logs:PutLogEvents",
                              "sns:Publish",
                              "ssm:DescribeParameters",
                              "ssm:GetParametersByPath",
                              "kms:ListKeys",
                              "kms:ListAliases",
                              "kms:DescribeKey",
                              "kms:ListKeyPolicies",
                              "kms:GetKeyPolicy",
                              "kms:GetKeyRotationStatus",
                              "kms:Decrypt"
                          ],
                          "Resource": [
                              "*"
                          ]
                      }
                  ]
              }

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/${ServiceName}-${Environment}
      RetentionInDays: 14

  DDLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/-${ServiceName}-${Environment}-dd-agent
      RetentionInDays: 14

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      TaskRoleArn: !GetAtt TaskRole.Arn
      Family: !Sub ${ServiceName}-${Environment}
      ContainerDefinitions:
        - Name: DD-Agent
          Image: datadog/agent:latest
          MountPoints:
            - ContainerPath: '/var/run/docker.sock'
              SourceVolume: 'dd1'
            - ContainerPath: '/host/proc/'
              SourceVolume: 'dd2'
            - ContainerPath: '/host/sys/fs/cgroup'
              SourceVolume: 'dd3'
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub /ecs/-${ServiceName}-${Environment}-dd-agent
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: dd-agent
          MemoryReservation: 256
          Environment:
            - Name: DD_APM_ENABLED
              Value: true
            - Name: DD_APM_NON_LOCAL_TRAFFIC
              Value: true
            - Name: DD_API_KEY
              Value: !Ref DataDogAPIKey
        - Name: !Sub ${ServiceName}-${Environment}
          Links:
            - DD-Agent
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ServiceName}:v1
          LogConfiguration:
            LogDriver: 'awslogs'
            Options:
              awslogs-group: !Sub /ecs/${ServiceName}-${Environment}
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
          MemoryReservation: 256
          Environment:
            - Name: REDIS_HOST
              Value: !Ref RedisHost
            - Name: DD_APM_ENABLED
              Value: true
            - Name: DD_AGENT_HOST
              Value: DD-Agent
            - Name: DD_TRACE_AGENT_PORT
              Value: 8126
      Volumes:
        - Host:
            SourcePath: "/var/run/docker.sock"
          Name: "dd1"
        - Host:
            SourcePath: "/proc/"
          Name: "dd2"
        - Host:
            SourcePath: "/sys/fs/cgroup/"
          Name: "dd3"
Outputs:
  TaskDefinition:
    Value: !Ref TaskDefinition