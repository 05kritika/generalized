AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Resources that deploy the application (service and task definition)
  it includes two roles for the service, one for the Auto Scaling and the other to register
  and deregister from the ALB. it also includes all the resources needed for the service
  Auto Scaling, including two CloudWatch alarms.
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC Param for the Target Group
  Cluster:
    Type: String
    Description: The ECS Cluster Id for the service
  DesiredCount:
    Type: Number
    Default: 1
    Description: Desided number of tasks that should be running on the cluster
  HttpListenerArn:
    Type: String
    Description: ALB http listener to register the task
  HttpsListenerArn:
    Type: String
    Default: ""
    Description: ALB https listener to register the task
  RepositoryName:
    Type: String
    Description: ECR repository name where the Jenkins image is located
  MasterTag:
    Type: String
    Description: Jenkins master image tag
  SlaveTag:
    Type: String
    Description: Jenkins master image tag
  Environment:
    Type: String
    Default: Dev
    AllowedValues: [Prod, Stage, Dev]
  StackName:
    Type: String
    Description: Stack name to prefix some resource names
Conditions:
  HttpsEnabled: !Not [!Equals [!Ref HttpsListenerArn, ""]]
Resources:
  ############## Roles ##############
  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - ecs.amazonaws.com
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
  ECSServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - application-autoscaling.amazonaws.com
            Action: 
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceAutoscaleRole
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: Allow
            Principal: 
              Service: 
                - ecs-tasks.amazonaws.com
            Action: 
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${StackName}-${Environment}-ECS
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - ecs:*
              - ecr:*
              Resource: '*'
        - PolicyName: !Sub ${StackName}-${Environment}-KMS
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - kms:decrypt
              Resource: '*' # Review
        - PolicyName: !Sub ${StackName}-${Environment}-S3
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Action:
              - s3:GetObject
              - s3:ListBucket
              Resource: '*' # Review
  ############# Service #############
  Service: 
    Type: AWS::ECS::Service
    Properties:
      LaunchType: EC2
      HealthCheckGracePeriodSeconds: 180
      Role: !Ref ECSServiceRole
      Cluster: !Ref Cluster
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 0
      LoadBalancers: 
        - ContainerName: !Sub JenkinsMaster-${Environment}
          ContainerPort: 8080
          TargetGroupArn: !Ref TargetGroup
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub JenkinsMaster-${Environment}
      TaskRoleArn: !Ref TaskRole
      Volumes:
        - Name: docker-socket
          Host:
            SourcePath: "/var/run/docker.sock"
      ContainerDefinitions:
        - Name: !Sub JenkinsMaster-${Environment}
          Essential: true
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}:${MasterTag}
          Environment:
            - Name: ECS_CLUSTER_ARN
              Value: !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:cluster/${Cluster}
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: SLAVE_IMAGE
              Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}:${SlaveTag}
            - Name: SLAVE_MEMORY
              Value: 1024 #Check this
          MountPoints:
            - ContainerPath: "/var/run/docker.sock"
              SourceVolume: docker-socket
              ReadOnly: false
          Memory: 2048
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
            - ContainerPort: 50000
              HostPort: 50000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
  ##### Service load balancing ######
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: 8080
      Protocol: HTTP
      Matcher:
        HttpCode: 200-299
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /login
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
  HttpListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn: !Ref HttpListenerArn
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values: 
            - /*
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
  # Conditioned if https is enabled
  HttpsListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Condition: HttpsEnabled
    Properties:
      ListenerArn: !Ref HttpsListenerArn
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values: 
            - /*
      Actions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
  ########## CloudWatch Logs #########
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      RetentionInDays: 30