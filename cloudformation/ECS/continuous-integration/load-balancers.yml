AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Resources to create a Load Balancer that exposes the Jenkins servers
  It includes a load balancer Security Group, a Load Balancer
  and a listener with a default target group
Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC to host the Load Balancer
  SubnetsIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet Ids to host the Load Balancer
  CertificateArn:
    Type: String
    Default: ""
    Description: SSL Certificate ARN
  Environment:
    Type: String
    Default: Dev
    AllowedValues: [Prod, Stage, Dev]
  StackName:
    Type: String
    Description: Stack name to prefix some resource names
Conditions:
  SslCertificateArnPresent: !Not [!Equals [!Ref CertificateArn, ""]]
Resources:
  ######### Security Groups #########
  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Only allow HTTP and HTTPS comunication to the load balancer
      SecurityGroupIngress:
        - { IpProtocol: 6, CidrIp: "0.0.0.0/0", FromPort: 80, ToPort: 80 }
        - { IpProtocol: 6, CidrIp: "0.0.0.0/0", FromPort: 443, ToPort: 443 }
      SecurityGroupEgress:
        - { IpProtocol: -1, CidrIp: "0.0.0.0/0" }
      Tags:
        - Key: Environment
          Value: !Sub ${StackName}-${Environment}
  ########## Load Balancer ##########
  LoadBalancer: #later configure access logs
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Type: application
      Subnets: !Ref SubnetsIds
      SecurityGroups: 
        - !Ref LoadBalancerSG
      Tags:
        - Key: Environment
          Value: !Sub ${StackName}-${Environment}
  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup
  # Conditioned if SSL Certificate is passed
  HttpsListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: SslCertificateArnPresent
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref CertificateArn
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DefaultTargetGroup
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: DefaultTargetGroup
        - Key: Environment
          Value: !Sub ${StackName}-${Environment}
Outputs:
  CanonicalHostedZoneID:
    Description: Canonical Hosted Zone ID
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID
  HttpListenerArn:
    Description: HTTP Listener ARN
    Value: !Ref HttpListener
  # Conditioned if SSL Certificate is passed
  HttpsListenerArn:
    Description: HTTPS Listener ARN
    Value: !Ref HttpsListener
    Condition: SslCertificateArnPresent
  LoadBalancerArn:
    Description: Load Balancer ARN
    Value: !Ref LoadBalancer
  LoadBalancerDomain:
    Description: Load Balancer Domain
    Value: !GetAtt LoadBalancer.DNSName
  LoadBalancerName:
    Description: Load Balancer Name
    Value: !GetAtt LoadBalancer.LoadBalancerName
  SecurityGroupId:
    Description: Load Balancer Security Group ID
    Value: !Ref LoadBalancerSG