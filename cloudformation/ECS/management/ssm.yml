AWSTemplateFormatVersion: "2010-09-09"
Description: >
  Creates System Manager Resources to do
  Patching to Operating Systems
  Patching custom AMIs
  Deploying updated custom AMIs
Parameters:
  AMI:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /L2-Demo/AMI
    Description: The AMI source Id to apply patching
  ASGName:
    Type: String
    Description: The name of the ASG to deploy the new AMI
  QSS3BucketName:
    AllowedPattern: ^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
    Default: ro-resourcebucket
    Type: String
    ConstraintDescription: Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)
    Description: S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)
  QSS3KeyPrefix:
    AllowedPattern: ^[0-9a-zA-Z-/]*$
    Default: demo
    Type: String
    ConstraintDescription: Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)
    Description: S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with a hyphen (-)
  Environment:
    Type: String
    Default: Dev
    AllowedValues: [Prod, Stage, Dev]
  StackName:
    Type: String
    Description: Stack name to prefix some resource names
Resources:
  ############### Roles ##############
  SSMServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ssm.amazonaws.com
            - ec2.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: !Sub ${StackName}-${Environment}-SSMService
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ssm:CancelCommand
                - ssm:GetCommandInvocation
                - ssm:ListCommandInvocations
                - ssm:ListCommands
                - ssm:SendCommand
                - ssm:GetAutomationExecution
                - ssm:GetParameters
                - ssm:StartAutomationExecution
              Resource:
                - "*"
            - Effect: Allow
              Action:
                - ec2:DescribeInstanceAttribute
                - ec2:DescribeInstanceStatus
                - ec2:DescribeInstances
              Resource:
                - "*"
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - arn:aws:lambda:*:*:function:SSM*
                - arn:aws:lambda:*:*:function:*:SSM*
            - Effect: Allow
              Action:
                - states:DescribeExecution
                - states:StartExecution
              Resource:
                - arn:aws:states:*:*:stateMachine:SSM*
                - arn:aws:states:*:*:execution:SSM*
            - Effect: Allow
              Action:
                - resource-groups:ListGroups
                - resource-groups:ListGroupResources
              Resource:
                - "*"
            - Effect: Allow
              Action:
                - tag:GetResources
              Resource:
                - "*"
            - Effect: Allow
              Action: iam:PassRole
              Resource: "*"
              Condition:
                StringEquals:
                  iam:PassedToService:
                  - ssm.amazonaws.com
  # Role for Instance used to create AMI
  ManagedInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ssm.amazonaws.com
            - ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: "/"
  ManagedInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
      - !Ref ManagedInstanceRole
  AutomationServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ssm.amazonaws.com
            - ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaRole
      Path: "/"
      Policies:
      - PolicyName: !Sub ${StackName}-${Environment}-PassRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - iam:PassRole
            Resource:
            - !GetAtt ManagedInstanceRole.Arn
  UpdateParameterLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSLambdaExecute
      - arn:aws:iam::aws:policy/AmazonSSMFullAccess
      Path: "/"
  UpdateASGLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AWSLambdaExecute
      - arn:aws:iam::aws:policy/AutoScalingFullAccess
      Path: "/"
  ########## Patch Baseline ##########
  PatchBaseline:
    Type: AWS::SSM::PatchBaseline
    Properties:
      Name: Amazon_Linux_PatchBaseline
      Description: Patch Baseline for Amazon Linux Instances following nclouds policies
      OperatingSystem: AMAZON_LINUX
      PatchGroups:
        - AMZ-Linux
      ApprovalRules:
        PatchRules:
        - ApproveAfterDays: 0
          ComplianceLevel: CRITICAL
          EnableNonSecurity: true
          PatchFilterGroup:
            PatchFilters:
            - Key: PRODUCT
              Values:
              - '*'
            - Key: CLASSIFICATION
              Values:
              - Security
              - Bugfix
              - Enhancement
              - Recommended
            - Key: SEVERITY
              Values:
              - Critical
              - Important
              - Medium
              - Low
  ######### MaintenanceWindow ########
  MaintenanceWindow:
    Type: AWS::SSM::MaintenanceWindow
    Properties:
      Name: Security_Patches_Updates
      Description: "A Maintenance window for applying patches"
      AllowUnassociatedTargets: true
      Schedule: cron(0 * ? * SUN *)
      Duration: 1
      Cutoff: 0
  MaintenanceWindowTargets:
    Type: AWS::SSM::MaintenanceWindowTarget
    Properties:
      Name: Patching_Targets
      Description: Targets for security patches
      WindowId: !Ref MaintenanceWindow
      ResourceType: INSTANCE
      Targets: 
        - Key: tag:Patch Group
          Values:
            - AMZ-Linux
    DependsOn: MaintenanceWindow
  PatchMaintenanceWindowTask:
    Type: AWS::SSM::MaintenanceWindowTask
    Properties:
      Name: Patching_Task
      Description: Installs security patches
      MaxErrors: 0
      ServiceRoleArn: !GetAtt SSMServiceRole.Arn
      Priority: 1
      MaxConcurrency: 20
      Targets: 
        - Key: WindowTargetIds 
          Values:
            - !Ref MaintenanceWindowTargets
      TaskArn: AWS-RunPatchBaseline
      TaskInvocationParameters:
        MaintenanceWindowRunCommandParameters:
          Parameters:
            {
              "Operation": [
                "Install"
              ]
            }
          # OutputS3BucketName: String
          # OutputS3KeyPrefix: String
      WindowId: !Ref MaintenanceWindow
      TaskType: RUN_COMMAND
    DependsOn: MaintenanceWindow
  UpdateAmiMaintenanceWindowTask:
    Type: AWS::SSM::MaintenanceWindowTask
    Properties:
      Name: UpdateAmi_Task
      Description: Updates custom AMIs
      MaxErrors: 0
      ServiceRoleArn: !GetAtt SSMServiceRole.Arn
      Priority: 1
      MaxConcurrency: 20
      Targets: 
        - Key: InstanceIds 
          Values:
            - i-00000000000000000
      TaskArn: !Ref UpdateAMIDocument
      TaskInvocationParameters:
        MaintenanceWindowAutomationParameters:
          Parameters:
            {
              "AutomationAssumeRole": [{"Fn::GetAtt": ["AutomationServiceRole", "Arn"]}],
              "ExcludePackages": ["none"],
              "IamInstanceProfileName": [{"Ref": "ManagedInstanceProfile"}],
              "IncludePackages": ["all"],
              "InstanceType": ["t2.micro"],
              "PostUpdateScript": ["none"],
              "PreUpdateScript": ["none"],
              "targetASG": [{"Ref": "ASGName"}],
              "SourceAmiId": [{"Ref": "AMI"}],
              "TargetAmiName": ["Update_from_{{SourceAmiId}}_on_{{global:DATE_TIME}}"]
            }
      WindowId: !Ref MaintenanceWindow
      TaskType: AUTOMATION
    DependsOn: 
      - MaintenanceWindow
      - UpdateAMIDocument
  UpdateAMIDocument:
    Type: AWS::SSM::Document
    Properties: 
      Content:
        {
          "schemaVersion": "0.3",
          "description": "Updates AMI with Linux distribution packages and Amazon software. For details,see https://docs.aws.amazon.com/systems-manager/latest/userguide/automation-awsdocs-linux.html",
          "assumeRole": "{{AutomationAssumeRole}}",
          "parameters": {
            "SourceAmiId": {
              "type": "String",
              "description": "(Required) The source Amazon Machine Image ID."
            },
            "IamInstanceProfileName": {
              "type": "String",
              "description": "(Required) The instance profile that enables Systems Manager (SSM) to manage the instance.",
              "default": "ManagedInstanceProfile"
            },
            "AutomationAssumeRole": {
              "type": "String",
              "description": "(Required) The ARN of the role that allows Automation to perform the actions on your behalf.",
              "default": "arn:aws:iam::{{global:ACCOUNT_ID}}:role/AutomationServiceRole"
            },
            "TargetAmiName": {
              "type": "String",
              "description": "(Optional) The name of the new AMI that will be created. Default is a system-generated string including the source AMI id, and the creation time and date.",
              "default": "UpdateLinuxAmi_from_{{SourceAmiId}}_on_{{global:DATE_TIME}}"
            },
            "InstanceType": {
              "type": "String",
              "description": "(Optional) Type of instance to launch as the workspace host. Instance types vary by region. Default is t2.micro.",
              "default": "t2.micro"
            },
            "PreUpdateScript": {
              "type": "String",
              "description": "(Optional) URL of a script to run before updates are applied. Default (\"none\") is to not run a script.",
              "default": "none"
            },
            "PostUpdateScript": {
              "type": "String",
              "description": "(Optional) URL of a script to run after package updates are applied. Default (\"none\") is to not run a script.",
              "default": "none"
            },
            "IncludePackages": {
              "type": "String",
              "description": "(Optional) Only update these named packages. By default (\"all\"), all available updates are applied.",
              "default": "all"
            },
            "ExcludePackages": {
              "type": "String",
              "description": "(Optional) Names of packages to hold back from updates, under all conditions. By default (\"none\"), no package is excluded.",
              "default": "none"
            },
            "targetASG":{
              "type":"String",
              "description":"Autosaling group to Update"
            }
          },
          "mainSteps": [
            {
              "name": "launchInstance",
              "action": "aws:runInstances",
              "maxAttempts": 3,
              "timeoutSeconds": 1200,
              "onFailure": "Abort",
              "inputs": {
                "ImageId": "{{SourceAmiId}}",
                "InstanceType": "{{InstanceType}}",
                "UserData": "IyEvYmluL2Jhc2gNCg0KZnVuY3Rpb24gZ2V0X2NvbnRlbnRzKCkgew0KICAgIGlmIFsgLXggIiQod2hpY2ggY3VybCkiIF07IHRoZW4NCiAgICAgICAgY3VybCAtcyAtZiAiJDEiDQogICAgZWxpZiBbIC14ICIkKHdoaWNoIHdnZXQpIiBdOyB0aGVuDQogICAgICAgIHdnZXQgIiQxIiAtTyAtDQogICAgZWxzZQ0KICAgICAgICBkaWUgIk5vIGRvd25sb2FkIHV0aWxpdHkgKGN1cmwsIHdnZXQpIg0KICAgIGZpDQp9DQoNCnJlYWRvbmx5IElERU5USVRZX1VSTD0iaHR0cDovLzE2OS4yNTQuMTY5LjI1NC8yMDE2LTA2LTMwL2R5bmFtaWMvaW5zdGFuY2UtaWRlbnRpdHkvZG9jdW1lbnQvIg0KcmVhZG9ubHkgVFJVRV9SRUdJT049JChnZXRfY29udGVudHMgIiRJREVOVElUWV9VUkwiIHwgYXdrIC1GXCIgJy9yZWdpb24vIHsgcHJpbnQgJDQgfScpDQpyZWFkb25seSBERUZBVUxUX1JFR0lPTj0idXMtZWFzdC0xIg0KcmVhZG9ubHkgUkVHSU9OPSIke1RSVUVfUkVHSU9OOi0kREVGQVVMVF9SRUdJT059Ig0KDQpyZWFkb25seSBTQ1JJUFRfTkFNRT0iYXdzLWluc3RhbGwtc3NtLWFnZW50Ig0KcmVhZG9ubHkgU0NSSVBUX1VSTD0iaHR0cHM6Ly9hd3Mtc3NtLWRvd25sb2Fkcy0kUkVHSU9OLnMzLmFtYXpvbmF3cy5jb20vc2NyaXB0cy8kU0NSSVBUX05BTUUiDQoNCmNkIC90bXANCkZJTEVfU0laRT0wDQpNQVhfUkVUUllfQ09VTlQ9Mw0KUkVUUllfQ09VTlQ9MA0KDQp3aGlsZSBbICRSRVRSWV9DT1VOVCAtbHQgJE1BWF9SRVRSWV9DT1VOVCBdIDsgZG8NCiAgZWNobyBBV1MtVXBkYXRlTGludXhBbWk6IERvd25sb2FkaW5nIHNjcmlwdCBmcm9tICRTQ1JJUFRfVVJMDQogIGdldF9jb250ZW50cyAiJFNDUklQVF9VUkwiID4gIiRTQ1JJUFRfTkFNRSINCiAgRklMRV9TSVpFPSQoZHUgLWsgL3RtcC8kU0NSSVBUX05BTUUgfCBjdXQgLWYxKQ0KICBlY2hvIEFXUy1VcGRhdGVMaW51eEFtaTogRmluaXNoZWQgZG93bmxvYWRpbmcgc2NyaXB0LCBzaXplOiAkRklMRV9TSVpFDQogIGlmIFsgJEZJTEVfU0laRSAtZ3QgMCBdOyB0aGVuDQogICAgYnJlYWsNCiAgZWxzZQ0KICAgIGlmIFtbICRSRVRSWV9DT1VOVCAtbHQgTUFYX1JFVFJZX0NPVU5UIF1dOyB0aGVuDQogICAgICBSRVRSWV9DT1VOVD0kKChSRVRSWV9DT1VOVCsxKSk7DQogICAgICBlY2hvIEFXUy1VcGRhdGVMaW51eEFtaTogRmlsZVNpemUgaXMgMCwgcmV0cnlDb3VudDogJFJFVFJZX0NPVU5UDQogICAgZmkNCiAgZmkgDQpkb25lDQoNCmlmIFsgJEZJTEVfU0laRSAtZ3QgMCBdOyB0aGVuDQogIGNobW9kICt4ICIkU0NSSVBUX05BTUUiDQogIGVjaG8gQVdTLVVwZGF0ZUxpbnV4QW1pOiBSdW5uaW5nIFVwZGF0ZVNTTUFnZW50IHNjcmlwdCBub3cgLi4uLg0KICAuLyIkU0NSSVBUX05BTUUiIC0tcmVnaW9uICIkUkVHSU9OIg0KZWxzZQ0KICBlY2hvIEFXUy1VcGRhdGVMaW51eEFtaTogVW5hYmxlIHRvIGRvd25sb2FkIHNjcmlwdCwgcXVpdHRpbmcgLi4uLg0KZmkNCg==",
                "MinInstanceCount": 1,
                "MaxInstanceCount": 1,
                "IamInstanceProfileName": "{{IamInstanceProfileName}}"
              }
            },
            {
              "name": "verifySsmInstall",
              "action": "aws:runCommand",
              "maxAttempts": 3,
              "timeoutSeconds": 1200,
              "onFailure": "Abort",
              "inputs": {
                "DocumentName": "AWS-RunShellScript",
                "InstanceIds": [
                  "{{launchInstance.InstanceIds}}"
                ],
                "Parameters": {
                  "commands": [
                    "hostname"
                  ]
                }
              }
            },
            {
              "name": "updateOSSoftware",
              "action": "aws:runCommand",
              "maxAttempts": 3,
              "timeoutSeconds": 3600,
              "onFailure": "Abort",
              "inputs": {
                "DocumentName": "AWS-RunShellScript",
                "InstanceIds": [
                  "{{launchInstance.InstanceIds}}"
                ],
                "Parameters": {
                  "commands": [
                    "set -e",
                    "[ -x \"$(which wget)\" ] && get_contents='wget $1 -O -'",
                    "[ -x \"$(which curl)\" ] && get_contents='curl -s -f $1'",
                    "if [[ {{global:REGION}} == 'us-gov-'* ]]",
                    "then",
                    "eval $get_contents https://s3-fips-{{global:REGION}}.amazonaws.com/aws-ssm-downloads-{{global:REGION}}/scripts/aws-update-linux-instance > /var/lib/amazon/ssm/aws-update-linux-instance",
                    "elif [[ {{global:REGION}} == 'cn-'* ]]",
                    "then",
                    "eval $get_contents https://aws-ssm-downloads-{{global:REGION}}.s3.{{global:REGION}}.amazonaws.com.cn/scripts/aws-update-linux-instance > /var/lib/amazon/ssm/aws-update-linux-instance",
                    "else",
                    "eval $get_contents https://aws-ssm-downloads-{{global:REGION}}.s3.amazonaws.com/scripts/aws-update-linux-instance > /var/lib/amazon/ssm/aws-update-linux-instance",
                    "fi",
                    "chmod +x /var/lib/amazon/ssm/aws-update-linux-instance",
                    "/var/lib/amazon/ssm/aws-update-linux-instance --pre-update-script '{{PreUpdateScript}}' --post-update-script '{{PostUpdateScript}}' --include-packages '{{IncludePackages}}' --exclude-packages '{{ExcludePackages}}' 2>&1 | tee /tmp/aws-update-linux-instance.log",
                    "rm -rf /var/lib/amazon/ssm/aws-update-linux-instance"
                  ]
                }
              }
            },
            {
              "name": "stopInstance",
              "action": "aws:changeInstanceState",
              "maxAttempts": 3,
              "timeoutSeconds": 1200,
              "onFailure": "Abort",
              "inputs": {
                "InstanceIds": [
                  "{{launchInstance.InstanceIds}}"
                ],
                "DesiredState": "stopped"
              }
            },
            {
              "name": "createImage",
              "action": "aws:createImage",
              "maxAttempts": 3,
              "onFailure": "Abort",
              "inputs": {
                "InstanceId": "{{launchInstance.InstanceIds}}",
                "ImageName": "{{TargetAmiName}}",
                "NoReboot": true,
                "ImageDescription": "AMI Generated by EC2 Automation on {{global:DATE_TIME}} from {{SourceAmiId}}"
              }
            },
            {
              "name": "terminateInstance",
              "action": "aws:changeInstanceState",
              "maxAttempts": 3,
              "onFailure": "Continue",
              "inputs": {
                "InstanceIds": [
                  "{{launchInstance.InstanceIds}}"
                ],
                "DesiredState": "terminated"
              }
            },
            {
              "name":"updateSsmParam",
              "action":"aws:invokeLambdaFunction",
              "timeoutSeconds":1200,
              "maxAttempts":1,
              "onFailure":"Abort",
              "inputs":{
                  "FunctionName":{"Ref": "UpdateParameterLambda"},
                  "Payload": "{\"parameterName\":\"/L2-Demo/AMI\", \"parameterValue\":\"{{createImage.ImageId}}\"}"
              }
            },
            {
              "name":"updateASG",
              "action":"aws:invokeLambdaFunction",
              "timeoutSeconds":1200,
              "maxAttempts":1,
              "onFailure":"Abort",
              "inputs": {
                  "FunctionName": {"Ref": "UpdateASGLambda"},
                  "Payload": "{\"targetASG\":\"{{targetASG}}\", \"newAmiID\":\"{{createImage.ImageId}}\"}"
              }
            }
          ],
          "outputs": [
            "createImage.ImageId"
          ]
        }
      DocumentType: Automation
      Tags:
        - Key: Environment
          Value: !Sub ${StackName}-${Environment}
    DependsOn: UpdateParameterLambda
  ############## Lambdas #############
  UpdateParameterLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Code:
        S3Bucket: !Ref QSS3BucketName
        S3Key: !Sub ${QSS3KeyPrefix}/management/updateParameter.zip
      Description: Lambda to update AMI id in parameter store
      Handler: updateParameter.lambda_handler
      Role: !GetAtt UpdateParameterLambdaRole.Arn
      Runtime: python2.7
      Timeout: 20
      Tags:
        - Key: Environment
          Value: !Sub ${StackName}-${Environment}
  UpdateASGLambda:
    Type: AWS::Lambda::Function
    Properties: 
      Code:
        S3Bucket: !Ref QSS3BucketName
        S3Key: !Sub ${QSS3KeyPrefix}/management/updateASG.zip
      Description: Lambda to update AMI in Auto Scaling Group
      Handler: updateASG.lambda_handler
      Role: !GetAtt UpdateASGLambdaRole.Arn
      Runtime: python2.7
      Timeout: 20
      Tags:
        - Key: Environment
          Value: !Sub ${StackName}-${Environment}
Outputs:
  SSMPatchBaseline:
    Value: !Ref PatchBaseline