AWSTemplateFormatVersion: "2010-09-09"
Description: "This template creates a Multi-AZ, multi-subnet VPC infrastructure with managed NAT gateways in the public subnet for each Availability Zone. You can also create additional private subnets with dedicated custom network access control lists (ACLs). If you deploy the Quick Start in a region that doesn't support NAT gateways, NAT instances are deployed instead. **WARNING** This template creates AWS resources. You will be billed for the AWS resources used if you create a stack from this template. QS(0027)"

Parameters:
  AvailabilityZones:
    Description: "List of Availability Zones to use for the subnets in the VPC. Note: The logical order is preserved."
    Type: List<AWS::EC2::AvailabilityZone::Name>
  CreatePrivateSubnets:
    AllowedValues:
      - true
      - false
    Default: true
    Description: "Set to false to create only public subnets. If false, the CIDR parameters for ALL private subnets will be ignored."
    Type: String
  Environment:
    Type: String
    Default: Dev
    AllowedValues: [Prod, Stage, Dev]
  PrivateSubnetATag1:
    AllowedPattern: "^([a-zA-Z0-9+\\-._:/@]+=[a-zA-Z0-9+\\-.,_:/@ *\\\\\"'\\[\\]\\{\\}]*)?$"
    ConstraintDescription: "tags must be in format \"Key=Value\" keys can only contain [a-zA-Z0-9+\\-._:/@], values can contain [a-zA-Z0-9+\\-._:/@ *\\\\\"'\\[\\]\\{\\}]"
    Default: "Network=Private"
    Description: "tag to add to private subnets A, in format Key=Value (Optional)"
    Type: String
  PrivateSubnetATag2:
    AllowedPattern: "^([a-zA-Z0-9+\\-._:/@]+=[a-zA-Z0-9+\\-.,_:/@ *\\\\\"'\\[\\]\\{\\}]*)?$"
    ConstraintDescription: "tags must be in format \"Key=Value\" keys can only contain [a-zA-Z0-9+\\-._:/@], values can contain [a-zA-Z0-9+\\-._:/@ *\\\\\"'\\[\\]\\{\\}]"
    Default: ""
    Description: "tag to add to public subnets, in format Key=Value (Optional)"
    Type: String
  PublicSubnetTag1:
    AllowedPattern: "^([a-zA-Z0-9+\\-._:/@]+=[a-zA-Z0-9+\\-.,_:/@ *\\\\\"'\\[\\]\\{\\}]*)?$"
    ConstraintDescription: "tags must be in format \"Key=Value\" keys can only contain [a-zA-Z0-9+\\-._:/@], values can contain [a-zA-Z0-9+\\-._:/@ *\\\\\"'\\[\\]\\{\\}]"
    Default: ""
    Description: "tag to add to public subnets, in format Key=Value (Optional)"
    Type: String
  PublicSubnetTag2:
    AllowedPattern: "^([a-zA-Z0-9+\\-._:/@]+=[a-zA-Z0-9+\\-.,_:/@ *\\\\\"'\\[\\]\\{\\}]*)?$"
    ConstraintDescription: "tags must be in format \"Key=Value\" keys can only contain [a-zA-Z0-9+\\-._:/@], values can contain [a-zA-Z0-9+\\-._:/@ *\\\\\"'\\[\\]\\{\\}]"
    Default: ""
    Description: "tag to add to public subnets, in format Key=Value (Optional)"
    Type: String
  VPCCIDR:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    ConstraintDescription: "CIDR block parameter must be in the form x.x.x.x/16-28"
    Default: "10.0.0.0/16"
    Description: "CIDR block for the VPC"
    Type: String
  VPCTenancy:
    AllowedValues:
      - default
      - dedicated
    Default: default
    Description: "The allowed tenancy of instances launched into the VPC"
    Type: String
  StackName:
    Type: String
    Default: earnup
    Description: "This name will be used to named the resources"
  SubnetOffset:
    Description: Offset of the subnet from the VPC CIDR
    Type: Number
    Default: 8
    MinValue: 1
    MaxValue: 32
  NumberOfSubnets:
    Type: Number
    Default: 4
    Description: Number of subnets, 2 public and 2 private (5 for 3 private subnets)
    MinValue: 4
    MaxValue: 6

Conditions:
  NATGatewayCondition: !Equals [!Ref CreatePrivateSubnets, "true"]
  NVirginiaRegionCondition: !Equals [!Ref "AWS::Region", "us-east-1"]
  PrivateSubnetsCondition: !Equals [!Ref CreatePrivateSubnets, "true"]
  PrivateSubnetATag1Condition: !Not [!Equals [!Ref PrivateSubnetATag1, ""]]
  PrivateSubnetATag2Condition: !Not [!Equals [!Ref PrivateSubnetATag2, ""]]
  PublicSubnetTag1Condition: !Not [!Equals [!Ref PublicSubnetTag1, ""]]
  PublicSubnetTag2Condition: !Not [!Equals [!Ref PublicSubnetTag2, ""]]
Resources:
  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !If
        - NVirginiaRegionCondition
        - ec2.internal
        - !Sub "${AWS::Region}compute.internal"
      DomainNameServers:
        - AmazonProvidedDNS

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      InstanceTenancy: !Ref VPCTenancy
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${StackName}-${Environment}
        - Key: StackName
          Value: !Sub ${StackName}-${Environment}

  VPCDHCPOptionsAssociation:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      VpcId: !Ref VPC
      DhcpOptionsId: !Ref DHCPOptions

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${StackName}-${Environment}
        - Key: StackName
          Value: !Sub ${StackName}-${Environment}

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PrivateSubnet1A:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [0, !Cidr [!Ref VPCCIDR, !Ref NumberOfSubnets, !Ref SubnetOffset]]
      AvailabilityZone: !Select [0, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Sub ${StackName}-Private subnet 1A
        - Key: StackName
          Value: !Sub ${StackName}-${Environment}
        - !If
          - PrivateSubnetATag1Condition
          - Key: !Select [0, !Split ["=", !Ref PrivateSubnetATag1]]
            Value: !Select [1, !Split ["=", !Ref PrivateSubnetATag1]]
          - !Ref AWS::NoValue
        - !If
          - PrivateSubnetATag2Condition
          - Key: !Select [0, !Split ["=", !Ref PrivateSubnetATag2]]
            Value: !Select [1, !Split ["=", !Ref PrivateSubnetATag2]]
          - !Ref AWS::NoValue

  PrivateSubnet2A:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [1, !Cidr [!Ref VPCCIDR, !Ref NumberOfSubnets, !Ref SubnetOffset]]
      AvailabilityZone: !Select [1, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Sub ${StackName}-Private subnet 2A
        - Key: StackName
          Value: !Sub ${StackName}-${Environment}
        - !If
          - PrivateSubnetATag1Condition
          - Key: !Select [0, !Split ["=", !Ref PrivateSubnetATag1]]
            Value: !Select [1, !Split ["=", !Ref PrivateSubnetATag1]]
          - !Ref AWS::NoValue
        - !If
          - PrivateSubnetATag2Condition
          - Key: !Select [0, !Split ["=", !Ref PrivateSubnetATag2]]
            Value: !Select [1, !Split ["=", !Ref PrivateSubnetATag2]]
          - !Ref AWS::NoValue

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [2, !Cidr [!Ref VPCCIDR, !Ref NumberOfSubnets, !Ref SubnetOffset]]
      AvailabilityZone: !Select [0, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Sub ${StackName}-Public subnet 1
        - Key: StackName
          Value: !Sub ${StackName}-${Environment}
        - !If
          - PublicSubnetTag1Condition
          - Key: !Select [0, !Split ["=", !Ref PublicSubnetTag1]]
            Value: !Select [1, !Split ["=", !Ref PublicSubnetTag1]]
          - !Ref AWS::NoValue
        - !If
          - PublicSubnetTag2Condition
          - Key: !Select [0, !Split ["=", !Ref PublicSubnetTag2]]
            Value: !Select [1, !Split ["=", !Ref PublicSubnetTag2]]
          - !Ref AWS::NoValue
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [3, !Cidr [!Ref VPCCIDR, !Ref NumberOfSubnets, !Ref SubnetOffset]]
      AvailabilityZone: !Select [1, !Ref AvailabilityZones]
      Tags:
        - Key: Name
          Value: !Sub ${StackName}-Public subnet 2
        - Key: StackName
          Value: !Sub ${StackName}-${Environment}
        - !If
          - PublicSubnetTag1Condition
          - Key: !Select [0, !Split ["=", !Ref PublicSubnetTag1]]
            Value: !Select [1, !Split ["=", !Ref PublicSubnetTag1]]
          - !Ref AWS::NoValue
        - !If
          - PublicSubnetTag2Condition
          - Key: !Select [0, !Split ["=", !Ref PublicSubnetTag2]]
            Value: !Select [1, !Split ["=", !Ref PublicSubnetTag2]]
          - !Ref AWS::NoValue
      MapPublicIpOnLaunch: true

  PrivateSubnet1ARouteTable:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${StackName}-Private route 1A
        - Key: Network
          Value: Private
        - Key: StackName
          Value: !Sub ${StackName}-${Environment}

  PrivateSubnet1ARoute:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet1ARouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway1

  PrivateSubnet1ARouteTableAssociation:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1A
      RouteTableId: !Ref PrivateSubnet1ARouteTable

  PrivateSubnet2ARouteTable:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${StackName}-Private route 2A
        - Key: Network
          Value: Private
        - Key: StackName
          Value: !Sub ${StackName}-${Environment}

  PrivateSubnet2ARoute:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateSubnet2ARouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NATGateway2

  PrivateSubnet2ARouteTableAssociation:
    Condition: PrivateSubnetsCondition
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2A
      RouteTableId: !Ref PrivateSubnet2ARouteTable

  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${StackName}-Public Route Table
        - Key: Network
          Value: Public
        - Key: StackName
          Value: !Sub ${StackName}-${Environment}

  PublicSubnetRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicSubnetRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicSubnetRouteTable

  NAT1EIP:
    Condition: PrivateSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NAT2EIP:
    Condition: PrivateSubnetsCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NATGateway1:
    Condition: NATGatewayCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [NAT1EIP, AllocationId]
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${StackName}-NATGateway 1
        - Key: StackName
          Value: !Sub ${StackName}-${Environment}

  NATGateway2:
    Condition: NATGatewayCondition
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt [NAT2EIP, AllocationId]
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${StackName}-NATGateway 2
        - Key: StackName
          Value: !Sub ${StackName}-${Environment}

Outputs:
  PrivateSubnet1AID:
    Condition: PrivateSubnetsCondition
    Description:  "Private subnet 1A ID in Availability Zone 1"
    Value: !Ref PrivateSubnet1A
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1AID"
  PublicSubnet1ID:
    Description: "Public subnet 1 ID in Availability Zone 1"
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet1ID"
  PublicSubnet2ID:
    Description: "Public subnet 2 ID in Availability Zone 2"
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PublicSubnet2ID"
  PrivateSubnet2AID:
    Condition: PrivateSubnetsCondition
    Description: "Private subnet 2A ID in Availability Zone 2"
    Value: !Ref PrivateSubnet2A
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2AID"
  VPCCIDR:
    Description: "VPC CIDR"
    Value: !Ref VPCCIDR
    Export:
      Name: !Sub "${AWS::StackName}-VPCCIDR"
  VPCID:
    Description:  "VPC ID"
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPCID"
