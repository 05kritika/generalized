AWSTemplateFormatVersion: "2010-09-09"
Description: "ECS Cluster"

Parameters:
  Environment:
    Type: String
    Description: Environment of application (dev, staging, prodution etc)
  ClusterName:
    Type: String
    Description: ECS cluster name
  InstanceType:
    Description: Intance type using in the cluster
    Type: String
    Default: t2.medium
  KeyPair:
    Description: Amazon EC2 Key Pair
    Type: AWS::EC2::KeyPair::KeyName
  MaxSize:
    Type: String
    Default: 5
    Description: Maximum number of instances in autoscaling group
  MinSize:
    Type: String
    Default: 1
    Description: Minimum number of instances in autoscaling group
  SubnetIds:
    Type: CommaDelimitedList
    Description: SubnetIds for ALB and EC2 instances
  VpcId:
    Type: String
    Description: VPC Id
  Scheme:
    Type: String
    AllowedValues:
      - internal
      - internet-facing
    Default: internal
    Description: Load balancer scheme (public or internal)
  BackendPort:
    Default: 8080
    Type: Number
    Description: Backend container port
  ServiceName:
    Type: String
    Description: Name of service to be deployed (ECS service name)

  #CollectorUrl:
    #Type: String
    #Description: StatsD collector url
  ServiceBucketPath:
    Type: String
    Description: Bucket path for task definition of specified service
  DesiredCount:
    Type: Number
    Default: 1
    Description: Desired running task count of specified service



Mappings:
  AWSRegionToAMI:
  # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-optimized_AMI.html
    us-east-2:
      AMI: ami-0307f7ccf6ea35750
    us-east-1:
      AMI: ami-045f1b3f87ed83659
    us-west-2:
      AMI: ami-01b70aea4161476b7
    us-west-1:
      AMI: ami-0285183bbef6224bd
    eu-west-3:
      AMI: ami-0f4738fbeb53e6c3a
    eu-west-2:
      AMI: ami-01bee3897bba49d78
    eu-west-1:
      AMI: ami-0627e141ce928067c
    eu-central-1:
      AMI: ami-0eaa3baf6969912ba
    ap-northeast-2:
      AMI: ami-00294948a592fc052
    ap-northeast-1:
      AMI: ami-05b296a384694dfa4
    ap-southeast-2:
      AMI: ami-02c73ee1100ce3e7a
    ap-southeast-1:
      AMI: ami-050865a806e0dae53
    ca-central-1:
      AMI: ami-0f552e0a86f08b660
    ap-south-1:
      AMI: ami-01ef9f6a829ae3956
    sa-east-1:
      AMI: ami-084b1eee100c102ee

Outputs:
  EcsCluster:
    Value: !Ref EcsCluster
  SecurityGroup:
    Value: !Ref SecurityGroup
  LoadBalancerArn:
    Value: !Ref LoadBalancer
  ListenerHttpArn:
    Value: !Ref HttpListener
  LoadBalancerZone:
    Value: !GetAtt LoadBalancer.CanonicalHostedZoneID
  LoadBalancerUrl:
    Value: !GetAtt LoadBalancer.DNSName

Resources:
  EcsAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT5M
        WaitOnResourceSignals: false
    Properties:
      VPCZoneIdentifier: !Ref SubnetIds
      LaunchConfigurationName: !Ref EcsLaunchConfiguration
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref MinSize
      TerminationPolicies:
        - Default
      Tags:
        - Key: Name
          Value: !Ref ClusterName
          PropagateAtLaunch: true

  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  EcsInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EcsRole


  EcsLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: !FindInMap [AWSRegionToAMI, !Ref "AWS::Region", AMI]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPair
      AssociatePublicIpAddress: true
      SecurityGroups:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref EcsInstanceProfile
      BlockDeviceMappings:
        - DeviceName: "/dev/xvdcy"
          Ebs:
            VolumeSize: "50"
            VolumeType: "gp2"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          echo ECS_CLUSTER=${ClusterName} >> /etc/ecs/ecs.config
          echo ECS_CONTAINER_STOP_TIMEOUT=90s >> /etc/ecs/ecs.config
          echo ECS_ENGINE_TASK_CLEANUP_WAIT_DURATION=2h >> /etc/ecs/ecs.config
          echo ECS_LOGLEVEL=info >> /etc/ecs/ecs.config

          yum install -y python-pip
          pip-2.6 install awscli
          yum install -y aws-cfn-bootstrap
          yum install -y git

          vgextend docker /dev/xvdcy
          lvextend -L+100G /dev/docker/docker-pool
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EcsLaunchConfiguration
          /opt/aws/bin/cfn-signal -e 0 --region ${AWS::Region} --stack ${AWS::StackName} --resource EcsAutoScalingGroup
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource EcsLaunchConfiguration
          commands:
            01_add_instance_to_cluster:
              command: !Sub echo ECS_CLUSTER=${EcsCluster} >> /etc/ecs/ecs.config
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf

  EcsRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${ClusterName}-EcsRole-${AWS::Region}
      AssumeRolePolicyDocument: |
        {
          "Statement": [{
            "Action": "sts:AssumeRole",
            "Effect": "Allow",
            "Principal": {
              "Service": "ec2.amazonaws.com"
            }
          }]
        }
      Policies:
        - PolicyName: ecs-service
          PolicyDocument: |
            {
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                    "ecs:CreateCluster",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Poll",
                    "ecs:RegisterContainerInstance",
                    "ecs:StartTelemetrySession",
                    "ecs:UpdateContainerInstancesState",
                    "ecs:Submit*",
                    "ecr:*",
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:DescribeLogStreams",
                    "logs:PutLogEvents",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:BatchGetImage",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:GetAuthorizationToken",
                    "s3:CopyObject",
                    "s3:GetObject",
                    "s3:ListObjects",
                    "s3:PutObject",
                    "sqs:*",
                    "sns:Publish",
                    "cloudformation:*"
                  ],
                  "Resource": "*"
              }]
            }

  RolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3Download
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"
      Roles:
        - !Ref EcsRole

  SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Allow tcp to client host
        VpcId: !Ref VpcId
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '0'
          ToPort: '65535'
          CidrIp: 0.0.0.0/0
        SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1
        Tags:
          - Key: Name
            Value: !Sub ${ClusterName}-LB

  ScaleDownAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleDownPolicy
      ComparisonOperator: LessThanOrEqualToThreshold
      EvaluationPeriods: 3
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Period: 60
      Statistic: Average
      Threshold: 50
      Unit: Percent
      Dimensions:
        - Name: ClusterName
          Value: !Ref ClusterName

  ScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref EcsAutoScalingGroup
      EstimatedInstanceWarmup: 300
      MetricAggregationType: Average
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalUpperBound: "0"
          ScalingAdjustment: "-1"

  ScaleUpMemoryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ActionsEnabled: true
      AlarmActions:
        - !Ref ScaleUpPolicyOnDemand
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: MemoryReservation
      Namespace: AWS/ECS
      Period: 60
      Statistic: Average
      Threshold: 70
      Unit: Percent
      Dimensions:
        - Name: ClusterName
          Value: !Ref ClusterName

  ScaleUpPolicyOnDemand:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref EcsAutoScalingGroup
      EstimatedInstanceWarmup: 300
      MetricAggregationType: Average
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          MetricIntervalUpperBound: 15
          ScalingAdjustment: 1
        - MetricIntervalLowerBound: 15
          ScalingAdjustment: 2


  ############## Load Balancer #############
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ServiceName}-${Environment}
      Scheme: !Ref Scheme
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup

  HttpListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref HttpTargetGroup

  HttpTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VpcId
      Port: 80
      Protocol: HTTP
      Matcher:
        HttpCode: 200-399
      HealthCheckPath: "/"
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 20
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 10
      UnhealthyThresholdCount: 10

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the Load Balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          FromPort: 80
          IpProtocol: tcp
          ToPort: 80
      Tags:
        - Key: Name
          Value: "elb-allow-web"

  ####################### ECS SERVICE ###########################
  TaskDefinition:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://s3.amazonaws.com/${ServiceBucketPath}/${ServiceName}.yaml"
      TimeoutInMinutes: '60'
      Parameters:
        Environment: !Ref Environment
        ServiceName: !Ref ServiceName
        ContainerPort: !Ref BackendPort

  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - HttpListener
    Properties:
      ServiceName: !Ref ServiceName
      Cluster: !Ref ClusterName
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !GetAtt TaskDefinition.Outputs.TaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      LoadBalancers:
        - ContainerName: !Ref ServiceName
          ContainerPort: !Ref BackendPort
          TargetGroupArn: !Ref HttpTargetGroup
