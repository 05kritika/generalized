---
AWSTemplateFormatVersion: 2010-09-09
Description: >
  Amazon EKS Cluster and Node Group

Parameters:

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC of the worker instances

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The subnets where workers can be created.

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The EC2 Key Pair to allow SSH access to the instances

  ClusterName:
    Type: String
    Description: The cluster name provided when the cluster was created. If it is incorrect, nodes will not be able to join the cluster.

  NodeInstanceType:
    Type: String
    Default: t2.small
    AllowedValues: [t2.small, t2.medium, t2.large]
    ConstraintDescription: Must be a valid EC2 instance type
    Description: EC2 instance type for the node instances

  NodeImageId:
    Type: AWS::EC2::Image::Id
    Default: ami-0923e4b35a30a5f53
    Description: AMI id for the node instances.

  DesiredCapacity:
    Type: Number
    Default: 3
    Description: Desired capacity of Node Group ASG.

  MinSize:
    Type: Number
    Default: 1
    Description: Minimum size of Node Group ASG.

  MaxSize:
    Type: Number
    Default: 4
    Description: Maximum size of Node Group ASG. Set to at least 1 greater than DesiredCapacity.

  MinInstancesInService:
    Type: String
    Default: 1
    Description: Minimun number of instances running on AutoScaling Group updates

  NodeVolumeSize:
    Description: Node volume size
    Type: Number
    Default: 20

  BootstrapArguments:
    Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
    Type: String
    Default: ""

  Environment:
    Type: String
    Default: Dev
    AllowedValues: [Prod, Stage, Dev]

  StackName:
    Type: String
    Description: Stack name to prefix some resource names
Resources:

  ############## Roles ##############
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
          - PolicyName: !Sub task-${AWS::StackName}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - ssm:*
                    - kms:*
                  Resource:
                    - "*"
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

  NodeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref NodeInstanceRole

  EKSServiceRole:
    Description: Allows EKS to manage clusters on your behalf.
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
            Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  ######### Security Groups #########
  NodeSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Security group for all nodes in the cluster
      Tags:
        - Key: !Sub kubernetes.io/cluster/${ClusterName}-${StackName}-${Environment}
          Value: owned
        - Key: Environment
          Value: !Sub ${StackName}-${Environment}
  NodeSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow node to communicate with each other
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: -1
      FromPort: 0
      ToPort: 65535
    DependsOn: NodeSecurityGroup
  NodeSecurityGroupFromControlPlaneIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535
    DependsOn:
      - NodeSecurityGroup
      - ControlPlaneSecurityGroup
  NodeSecurityGroupFromControlPlaneOn443Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
      GroupId: !Ref NodeSecurityGroup
      SourceSecurityGroupId: !Ref ControlPlaneSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
    DependsOn:
      - NodeSecurityGroup
      - ControlPlaneSecurityGroup

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: Cluster communication with worker nodes
  ControlPlaneEgressToNodeSecurityGroupOn443:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
    DependsOn:
      - NodeSecurityGroup
      - ControlPlaneSecurityGroup
  ControlPlaneEgressToNodeSecurityGroup:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      Description: Allow the cluster control plane to communicate with worker Kubelet and pods
      GroupId: !Ref ControlPlaneSecurityGroup
      DestinationSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      FromPort: 1025
      ToPort: 65535
    DependsOn:
      - NodeSecurityGroup
      - ControlPlaneSecurityGroup
  ControlPlaneSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Allow pods to communicate with the cluster API Server
      GroupId: !Ref ControlPlaneSecurityGroup
      SourceSecurityGroupId: !Ref NodeSecurityGroup
      IpProtocol: tcp
      ToPort: 443
      FromPort: 443
    DependsOn:
      - NodeSecurityGroup
      - ControlPlaneSecurityGroup

  ############# Cluster #############
  Cluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Sub ${ClusterName}-${StackName}-${Environment}
      Version: 1.11
      RoleArn: !GetAtt EKSServiceRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref ControlPlaneSecurityGroup
        SubnetIds: !Ref Subnets

  NodeGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      DesiredCapacity: !Ref DesiredCapacity
      LaunchConfigurationName: !Ref NodeLaunchConfig
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      VPCZoneIdentifier: !Ref Subnets
      Tags:
        - Key: Name
          Value: !Sub ${ClusterName}-NodeGroup
          PropagateAtLaunch: true
        - Key: !Sub kubernetes.io/cluster/${ClusterName}
          Value: owned
          PropagateAtLaunch: true
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MaxBatchSize: 1
        MinInstancesInService: !Ref DesiredCapacity
    DependsOn: Cluster

  NodeLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref NodeInstanceProfile
      ImageId: !Ref NodeImageId
      InstanceType: !Ref NodeInstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref NodeSecurityGroup
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref NodeVolumeSize
            VolumeType: gp2
            DeleteOnTermination: true
      UserData:
        Fn::Base64:
          !Sub |
            #!/bin/bash
            set -o xtrace
            /etc/eks/bootstrap.sh ${ClusterName}-${StackName}-${Environment} ${BootstrapArguments}
            /opt/aws/bin/cfn-signal --exit-code $? \
                     --stack  ${AWS::StackName} \
                     --resource NodeGroup  \
                     --region ${AWS::Region}

Outputs:

  ClusterName:
    Description: Cluster Name
    Value: !Ref Cluster
    Export:
      Name: !Sub ${StackName}-${Environment}:ClusterName

  ClusterArn:
    Description: Cluster Arn
    Value: !GetAtt Cluster.Arn
    Export:
      Name: !Sub ${StackName}-${Environment}:ClusterArn

  ClusterEndpoint:
    Description: Cluster Endpoint
    Value: !GetAtt Cluster.Endpoint
    Export:
      Name: !Sub ${StackName}-${Environment}:ClusterEndpoint

  ControlPlaneSecurityGroup:
    Value: !Ref ControlPlaneSecurityGroup
    Description: ControlPlaneSecurityGroup
    Export:
      Name: !Sub ${StackName}-${Environment}:ControlPlaneSecurityGroup

  NodeInstanceRole:
    Description: The node instance role
    Value: !GetAtt NodeInstanceRole.Arn
    Export:
      Name: !Sub ${StackName}-${Environment}:NodeInstanceRole

  NodeSecurityGroup:
    Description: The security group for the node group
    Value: !Ref NodeSecurityGroup
    Export:
      Name: !Sub ${StackName}-${Environment}:NodeSecurityGroup
