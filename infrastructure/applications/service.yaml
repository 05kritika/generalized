AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys a service into ECS cluster
Parameters:
  Listener:
    Description: The ALB Listener to attach the path-base rule
    Type: String
  VpcId:
    Description: The ID of the VPC in which the targets are located
    Type: AWS::EC2::VPC::Id
  ImageTag:
    Description: Tag of container to launch
    Type: String
    Default: latest
  TaskCount:
    Description: Number of tasks to run in the service
    Type: Number
    Default: 1
  ContainerPort:
    Description: Internal port on which the container listers
    Type: Number
  ContainerMemory:
    Description: Memory allocation for the container. Tasks that exceed their allocation
      are restarted.
    Type: Number
  ContainerCPU:
    Description: CPU allocation for the container. Tasks that exceed their allocation
      are restarted.
    Type: Number
  ECSCluster:
    Description: ECS Cluster to attach the service
    Type: String
  ServiceName:
    Description: Used to identify task and path for load balancer rule
    Type: String
  ECR:
    Type: String
    Default: demo-app
  TargetGroup:
    Type: String
Resources:
  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365
  TaskDefinitionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub TaskDefinitionRole-${ServiceName}
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
          - PolicyName: !Sub task-${AWS::StackName}
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - ssm:*
                    - kms:*
                    - sts:*
                  Resource:
                    - "*"
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      TaskRoleArn: !Ref TaskDefinitionRole
      Family: !Sub ${ServiceName}-task
      ContainerDefinitions:
        - Name: demo-app
          Hostname: railsapp
          Essential: 'true'
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RailsECR}:${ImageTag}
          Memory: !Ref 'ContainerMemory'
          Cpu: !Ref 'ContainerCPU'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref AWS::StackName
  TaskDefinitionDelayedjobs:
    Type: AWS::ECS::TaskDefinition
    Properties:
      TaskRoleArn: !Ref TaskDefinitionRole
      Family: !Sub ${ServiceName}-task-delayedjobs
      ContainerDefinitions:
        - Name: demo-app-delayedjobs
          Hostname: railsapp
          Essential: 'true'
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RailsECR}:${ImageTag}
          Memory: !Ref 'ContainerMemory'
          Cpu: !Ref 'ContainerCPU'
          Command:
            - "/bin/bash"
            - "-c"
            - "nclouds/start_delayedjobs.sh"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: !Ref AWS::StackName
  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref 'ECSCluster'
      ServiceName: !Ref ServiceName
      Role: !Ref 'ServiceRole'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: !Ref 'TaskCount'
      HealthCheckGracePeriodSeconds: 60
      LoadBalancers:
        - ContainerName: demo-app
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'
      TaskDefinition: !Ref 'TaskDefinition'
  # ServiceDelayed:
  #   Type: AWS::ECS::Service
  #   Properties:
  #     Cluster: !Ref 'ECSCluster'
  #     ServiceName: !Sub '${ServiceName}-Delayed-jobs'
  #     Role: !Ref 'ServiceRole'
  #     DeploymentConfiguration:
  #       MaximumPercent: 200
  #       MinimumHealthyPercent: 50
  #     DesiredCount: 0
  #     HealthCheckGracePeriodSeconds: 60
  #     LoadBalancers:
  #       - ContainerName: demo-app-delayedjobs
  #         ContainerPort: !Ref 'ContainerPort'
  #         TargetGroupArn: !Ref 'TargetGroup'
  #     TaskDefinition: !Ref 'TaskDefinitionDelayedjobs'
  ServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ServiceRole-${ServiceName}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole
  ScalableTargetRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ScaleTargetRole-${ServiceName}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - 'application-autoscaling:*'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'ecs:DescribeServices'
                  - 'ecs:UpdateService'
                  - 'cloudwatch:PutMetricAlarm'
                  - 'cloudwatch:DescribeAlarms'
                  - 'cloudwatch:GetMetricStatistics'
                  - 'cloudwatch:SetAlarmState'
                  - 'cloudwatch:DeleteAlarms'
                Resource: '*'
  ServiceScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 2
      MinCapacity: 0
      ResourceId: !Join ['', [service/, !Ref ECSCluster, /, !GetAtt Service.Name]]
      RoleARN: !GetAtt [ScalableTargetRole, Arn]
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
  ServiceUpStepPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: CPUUtilization-step-up
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1
  ServiceUpStepPolicyMEM:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: MemoryUtilization-step-up
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1
  ServiceDownStepPolicyCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: CPUUtilization-step-down
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: "-1"
  ServiceDownStepPolicyMEM:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: MemoryUtilization-step-down
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: "-1"

  ServiceCPUAlarmUp:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Sub "${ServiceName} Alarm CPUUtilization Up"
      ActionsEnabled: true
      AlarmActions:
        - !Ref ServiceUpStepPolicyCPU
      AlarmDescription: >
        The CPU utilization of the Service has exeeded 90% for more than 1 minute.
        Breaching this alarm should trigger an AutoScalingGroup to scale up.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt Service.Name
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Period: 60
      Statistic: Average
      Threshold: 90
  ServiceCPUAlarmDown:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Sub "${ServiceName} Alarm CPUUtilization Down"
      ActionsEnabled: true
      AlarmActions:
        - !Ref ServiceDownStepPolicyCPU
      AlarmDescription: >
        The CPU utilization of the Service cluster has dropped below 20% for more than 1 minute.
        Breaching this alarm should trigger an AutoScalingGroup to scale up.
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt Service.Name
      EvaluationPeriods: 1
      MetricName: CPUUtilization
      Namespace: AWS/ECS
      Period: 60
      Statistic: Average
      Threshold: 20
  ServiceMemAlarmUp:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Sub "${ServiceName} Alarm MemoryUtilization Up"
      ActionsEnabled: true
      AlarmActions:
        - !Ref ServiceUpStepPolicyMEM
      AlarmDescription: >
        The MemoryUtilization of the Service has exceeded 90% for more than 3 minutes.
        Breaching this alarm should trigger an ASG scale out.
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt Service.Name
      EvaluationPeriods: 1
      MetricName: MemoryUtilization
      Namespace: AWS/ECS
      Period: 60
      Statistic: Average
      Threshold: 90
  ServiceMemAlarmDown:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Sub "${ServiceName} Alarm MemoryUtilization Down"
      ActionsEnabled: true
      AlarmActions:
        - !Ref ServiceDownStepPolicyMEM
      AlarmDescription: >
        The MemoryUtilization of the Service has dropped below 40% for more than 1 hour.
        Breaching this alarm should trigger an ASG scale in.
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
        - Name: ServiceName
          Value: !GetAtt Service.Name
      EvaluationPeriods: 1
      MetricName: MemoryUtilization
      Namespace: AWS/ECS
      Period: 3600
      Statistic: Average
      Threshold: 40
Outputs:
  ServiceArn:
    Description: ARN of the created Service.
    Value: !Ref 'Service'
