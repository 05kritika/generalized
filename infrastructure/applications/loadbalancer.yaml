Description: |
  Deploys an ApplicationLoadBalancer
Parameters:
  LoadBalancerSubnets:
      Description: Subnet(s) for the load balancer
      Type: List<AWS::EC2::Subnet::Id>
  VpcId:
      Description: VPC ID for resources
      Type: AWS::EC2::VPC::Id
  ALBPort:
    Type: String
    Default: 80
  Certificate:
    Type: String
    Description: Certificate ARN resource.
    Default: ""
  ContainerPort:
    Description: Port of Web api on docker
    Type: String
    Default: 80
  ClusterName:
    Type: String
Conditions:
    CreateHTTPS: !Not [ !Equals [ !Ref Certificate, "" ]]
Resources:
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ClusterName} SG ALB Public"
      GroupDescription: Security group for the ApplicationLoadBalancer
      VpcId: !Ref 'VpcId'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName} SG ALB Public"
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ClusterName}-ALB-Public"
      SecurityGroups:
        - !Ref 'LoadBalancerSecurityGroup'
      Subnets: !Ref 'LoadBalancerSubnets'
  ApplicationLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'TargetGroup'
      LoadBalancerArn: !Ref 'ApplicationLoadBalancer'
      Port: !Ref ALBPort
      Protocol: HTTP
  ApplicationLoadBalancerHTTPSListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Condition: CreateHTTPS
    Properties:
      Certificates:
        - CertificateArn: !Ref Certificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'TargetGroup'
      LoadBalancerArn: !Ref 'ApplicationLoadBalancer'
      Port: 443
      Protocol: HTTPS
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - ApplicationLoadBalancer
    Properties:
      Name: !Sub "${ClusterName}-target-group"
      Port: !Ref ContainerPort
      Protocol: HTTP
      VpcId: !Ref 'VpcId'
      HealthCheckTimeoutSeconds: 50
      HealthCheckIntervalSeconds: 60
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3
      Matcher:
        HttpCode: 200-499
Outputs:
  Listener:
    Description: ApplicationLoadBalancer Listener
    Value: !Ref 'ApplicationLoadBalancerListener'
  HTTPSListener:
    Condition: CreateHTTPS
    Description: ApplicationLoadBalancer HTTPS Listener
    Value: !Ref 'ApplicationLoadBalancerHTTPSListener'
  ApplicationLoadBalancerEndpoint:
    Description: DNS name of the ApplicationLoadBalancer
    Value: !GetAtt 'ApplicationLoadBalancer.DNSName'
  TargetGroup:
    Description: TargetGroup for ABL
    Value: !Ref TargetGroup
  LoadBalancerSecurityGroup:
    Description: ALB SecurityGroup
    Value: !Ref LoadBalancerSecurityGroup
  LoadBalancerSecurityGroupId:
    Description: ALB SecurityGroup
    Value: !GetAtt LoadBalancerSecurityGroup.GroupId
