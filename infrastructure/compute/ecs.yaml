Description: |
  Deploys an ECS Cluster
  WARNING:
    CloudWatch Alarms
    Instance Profile
    Role
    Load Balancer
    Target Group
  If you specify a name, you cannot perform updates that require replacement of this resource. You can perform updates that require no or some interruption. If you must replace the resource, specify a new name.
Parameters:
  KeyPair:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the container
      instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Must be a valid EC2 keypair.
  # LoadBalancerSubnets:
  #   Description: Subnet(s) for the load balancer
  #   Type: List<AWS::EC2::Subnet::Id>
  ECSSubnets:
    Description: Subnets for the ECS container instances
    Type: List<AWS::EC2::Subnet::Id>
  VpcId:
    Description: VPC ID for resources
    Type: AWS::EC2::VPC::Id
  InstanceType:
    Description: Container instances EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - x1.32xlarge
      - x1.16xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  DesiredCapacity:
    Type: Number
    Default: 1
    Description: Number of instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Description: Maximum number of instances that can be launched in your ECS cluster.
  ClusterName:
    Type: String
    Description: Name of the cluster for environment.
  LoadBalancerSecurityGroup:
    Type: String
  ECSAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id
Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Ref ClusterName

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !Ref 'ECSSubnets'
      LaunchConfigurationName: !Ref 'ContainerInstances'
      MinSize: 1
      MaxSize: !Ref 'MaxSize'
      DesiredCapacity: !Ref 'DesiredCapacity'
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName} Container Instance"
          PropagateAtLaunch: 'true'
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !Ref 'DesiredCapacity'
        MaxBatchSize: 1
        PauseTime: PT5M
        WaitOnResourceSignals: true
  ECSUpStepScalePolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ECSAutoScalingGroup
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 1
  ECSDownStepScalePolicy:
    Type: "AWS::AutoScaling::ScalingPolicy"
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref ECSAutoScalingGroup
      PolicyType: StepScaling
      StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: "-1"

  ECSCPUAlarmUp:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Sub "${ClusterName} Alarm CPUUtilization Up"
      ActionsEnabled: true
      AlarmActions:
        - !Ref ECSUpStepScalePolicy
      AlarmDescription: >
        The CPU Reservation of the ECS cluster has exeeded 75% for more than 1 minute.
        Breaching this alarm should trigger an AutoScalingGroup to scale up.
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
      EvaluationPeriods: 1
      MetricName: CPUReservation
      Namespace: AWS/ECS
      Period: 60
      Statistic: Average
      Threshold: 75
  ECSCPUAlarmDown:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Sub "${ClusterName} Alarm CPUUtilization Down"
      ActionsEnabled: true
      AlarmActions:
        - !Ref ECSDownStepScalePolicy
      AlarmDescription: >
        The CPU Reservation of the ECS cluster has dropped below 45% for more than one hour.
        Breaching this alarm should trigger an AutoScalingGroup to scale up.
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: ClusterName
          Value: !Ref ECSCluster
      EvaluationPeriods: 1
      MetricName: CPUReservation
      Namespace: AWS/ECS
      Period: 300
      Statistic: Average
      Threshold: 45
  # ECSMemAlarmUp:
  #   Type: "AWS::CloudWatch::Alarm"
  #   Properties:
  #     AlarmName: !Sub "${ClusterName} Alarm MemoryUtilization Up"
  #     ActionsEnabled: true
  #     AlarmActions:
  #       - !Ref ECSUpStepScalePolicy
  #     AlarmDescription: >
  #       The MemoryReservation of the ECS cluster has exceeded 90% for more than 3 minutes.
  #       Breaching this alarm should trigger an ASG scale out.
  #     ComparisonOperator: GreaterThanOrEqualToThreshold
  #     Dimensions:
  #       - Name: ClusterName
  #         Value: !Ref ECSCluster
  #     EvaluationPeriods: 3
  #     MetricName: MemoryUtilization
  #     Namespace: AWS/ECS
  #     Period: 60
  #     Statistic: Average
  #     Threshold: 90
  # ECSMemAlarmDown:
  #   Type: "AWS::CloudWatch::Alarm"
  #   Properties:
  #     AlarmName: !Sub "${ClusterName} Alarm MemoryUtilization Down"
  #     ActionsEnabled: true
  #     AlarmActions:
  #       - !Ref ECSDownStepScalePolicy
  #     AlarmDescription: >
  #       The MemoryReservation of the ECS cluster has dropped below 10% for more than 1 hour.
  #       Breaching this alarm should trigger an ASG scale in.
  #     ComparisonOperator: LessThanThreshold
  #     Dimensions:
  #       - Name: ClusterName
  #         Value: !Ref ECSCluster
  #     EvaluationPeriods: 1
  #     MetricName: MemoryUtilization
  #     Namespace: AWS/ECS
  #     Period: 3600
  #     Statistic: Average
  #     Threshold: 10

  ContainerInstancesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VpcId'
      GroupName: !Sub "${ClusterName} SG Container Instance"
      GroupDescription: Enable HTTP from the ApplicationLoadBalancer on dynamic ports
      SecurityGroupIngress:
        - IpProtocol: -1
          SourceSecurityGroupId: !Ref 'LoadBalancerSecurityGroup'
      Tags:
        - Key: Name
          Value: !Sub "${ClusterName} SG Container Instance"
  ContainerInstances:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            '01_add_instance_to_cluster':
              command: !Join
                - ""
                - - "#!/bin/bash \n"
                  - "yum install -y aws-cli\n"
                  - !Sub "echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config\n"
          files:
            /etc/cfn/cfn-hup.conf:
              content: !Join
                - ""
                - - "[main]"
                  - "\n"
                  - !Sub "stack=${AWS::StackId}"
                  - "\n"
                  - !Sub "region=${AWS::Region}"
                  - "\n"
              mode: 000400
              owner: root
              group: root
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Join
                - ""
                - - "[cfn-auto-reloader-hook]"
                  - "\n"
                  - "triggers=post.update\n"
                  - "path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\n"
                  - !Sub "action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ContainerInstances"
                  - "\n"
              mode: 000400
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      ImageId: !Ref ECSAMI
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'ContainerInstanceProfile'
      KeyName: !Ref 'KeyPair'
      SecurityGroups:
        - !Ref 'ContainerInstancesSecurityGroup'
      UserData:
        Fn::Base64: !Join
          - ""
          - - "#!/bin/bash -xe \n"
            - "yum -y update \n"
            - "yum install -y aws-cfn-bootstrap \n"
            - !Sub "/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ContainerInstances --region ${AWS::Region}"
            - "\n"
            - !Sub "/opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}"
            - "\n"
  ContainerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref 'ContainerServiceRole'
      InstanceProfileName: !Sub "${ClusterName}InstanceProfile"
  ContainerServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ClusterName}InstanceRole"
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
          - PolicyName: ecs-service
            PolicyDocument:
              Statement:
                - Effect: Allow
                  Action:
                    - ecs:CreateCluster
                    - ecs:DeregisterContainerInstance
                    - ecs:DiscoverPollEndpoint
                    - ecs:Poll
                    - ecs:RegisterContainerInstance
                    - ecs:StartTelemetrySession
                    - ecs:Submit*
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource:
                    - "*"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
Outputs:
  Cluster:
    Description: The created ECS cluster
    Value: !Ref 'ECSCluster'
  ContainerInstancesSecurityGroup:
    Description: Security Group GroupID of the ECS instances
    Value: !GetAtt 'ContainerInstancesSecurityGroup.GroupId'
