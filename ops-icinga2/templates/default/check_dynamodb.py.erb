#!/usr/bin/python

######################################################################################
## Autogenerated by Chef.
######################################################################################

import boto.ec2.cloudwatch
import boto.dynamodb2
import datetime
import argparse
import sys 
# Arguments
parser = argparse.ArgumentParser()
parser.add_argument('-r', '--region',
                    default='us-west-2',
                    type=str, help='AWS region')
parser.add_argument('-f', '--fabric',
                    default='',
                    type=str, help='fabric name')
parser.add_argument('-m', '--metric',
                    default='ReadThrottleEvents',
                    type=str, help='ReadThrottleEvents or WriteThrottleEvents')
parser.add_argument('-a', '--allowed_violations',
                    default=1,
                    type=int, help='Max violations we can allow over certain number of points. If we exceed this number, then alert.')
parser.add_argument('-p', '--points',
                    default=5,
                    type=int, help='The number of data points over which to check for violations')
parser.add_argument('-t', '--threshold',
                    default=1.0,
                    type=float, help='Exceeding this threshold counts as a violation')

args = parser.parse_args()
region = args.region
fabric = args.fabric
metric = args.metric
allowed_violations = args.allowed_violations
points = args.points
threshold = args.threshold

def getthrottleevents(region,metric,table):
    cloudwatch = boto.ec2.cloudwatch.connect_to_region(region)
    data = cloudwatch.get_metric_statistics(60,
        datetime.datetime.utcnow() - datetime.timedelta(minutes = points),
        datetime.datetime.utcnow(),
        metric,
        'AWS/DynamoDB',
        'Average',
        dimensions={'TableName':[table]})

    total_violations = 0 
    if len(data) > 0 : 
        for d in data:
            if d["Average"] > threshold:
                total_violations += 1

    if total_violations > allowed_violations :
       print "Critical: Found "+metric+" on "+table
       sys.exit(2)

conn = boto.dynamodb2.connect_to_region(region)
tablelists = conn.list_tables()['TableNames']
for table in tablelists:
    if table.startswith(fabric):
       getthrottleevents(region,metric,table)

print "OK: No "+metric+" on "+fabric+" in "+str(points)+" minutes"
sys.exit(0)

